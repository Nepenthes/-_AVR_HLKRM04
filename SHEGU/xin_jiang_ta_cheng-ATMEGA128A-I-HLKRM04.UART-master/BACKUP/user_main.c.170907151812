#include "usart.h"
#include "IO_control.h"

extern uchar WIFI_BUF_QUE[BUFFER0_QLENTH][UART0_RX_BUFFER_SIZE];	
extern uchar ITFR_BUF_QUE[BUFFER1_QLENTH][UART1_RX_BUFFER_SIZE];	

extern infoMal infoMal_teacher;
extern infoMal infoMal_student;

infoUser userMe 	 = {"00000000","00000000"};
infoUser userMe_temp = {"00000000","00000000"};

void delay_3us(void)  //3us延时函数,,可重复调用不影响精度 
{
   asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
   asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
   asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
}

void delay_10us(void)  //10us延时函数,可重复调用不影响精度
{
 	delay_3us();
 	delay_3us();
 	delay_3us();
}

void delay_50us(void)  //48us延时函数,可重复调用不影响精度
{      
  	delay_10us();    
  	delay_10us();    
  	delay_10us();   
  	delay_10us();    
  	delay_10us();
}
 
void delay_100us(void)//exactly 98us延时函数,可重复调用不影响精度
{
  delay_50us();
  delay_50us();
  delay_3us();
}
 
void delay_1ms(void)            
{
  delay_100us(); delay_100us(); delay_100us(); delay_100us(); delay_100us();
  delay_100us(); delay_100us(); delay_100us(); delay_100us(); delay_100us();
}
  
 void delay_ms(uint ms )
{
    while(ms--)  
		delay_1ms();//8MHZ主频时，25分钟误差小于1秒
}

void EEPROM_write(uchar addr,uchar data){

	while(EECR & BIT(EEWE));
	EEAR=addr;
	EEDR=data;
	EECR|=BIT(EEMWE);
	EECR|=BIT(EEWE);
}

uchar EEPROM_read(uchar addr){

 	while(EECR & BIT(EEWE));
	EEAR=addr;
	EECR|=BIT(EERE);
	return EEDR;
}

void userID_read(uchar Dats[8]){
	 
	uchar loop;
	
	for(loop = 0;loop < 8;loop ++)
		Dats[loop] = EEPROM_read(loop+0x10);
}

void userID_write(uchar Dats[8]){
	 
	uchar loop;
	
	for(loop = 0;loop < 8;loop ++)
		EEPROM_write(loop+0x10,Dats[loop]);
}


void password_read(uchar Dats[8]){
	 
	uchar loop;
	
	for(loop = 0;loop < 8;loop ++)
		Dats[loop] = EEPROM_read(loop+0x20);
}

void password_write(uchar Dats[8]){
	 
	uchar loop;
	
	for(loop = 0;loop < 8;loop ++)
		EEPROM_write(loop+0x20,Dats[loop]);
}

void bspInit(void)
{
 	usart_init();
	
	userID_read(userMe.userID);
	password_read(userMe.password);
}

void thread_test(void){

	 uchar loopa,loopb;

	 while(1){
	 
	 /*********************************************PROCESSING_WIFI*********************************************/
	 																								
	 	 if(!strcmp(userMe_temp.userID,userMe.userID) && !strcmp(userMe_temp.password,userMe.password)){	//用户名及密码验证
		 
		 	if(infoMal_teacher.dianfengshan)ITFR_PUTS("device_select.dfs.txt=\"1\"");	//解冻设备选项
			if(infoMal_teacher.weibolu)ITFR_PUTS("device_select.wbl.txt=\"1\"");
			if(infoMal_teacher.dianfanbao)ITFR_PUTS("device_select.dfb.txt=\"1\"");
			if(infoMal_teacher.xiyiji)ITFR_PUTS("device_select.xyj.txt=\"1\"");
			if(infoMal_teacher.xiaodugui)ITFR_PUTS("device_select.xdg.txt=\"1\"");
			
		 	ITFR_PUTS("page device_select");	//开放设故选择界面
		 }
		 
		 putchar0(0x30+strcmp(userMe_temp.userID,userMe.userID));				//用户名比较结果测试
		 putchar0(0x30+strcmp(userMe_temp.password,userMe.password));			//密码比较结果测试
		 
		 if(WIFI_BUF[0] == 0x5a){				//包头解析
		 
		 	 if((WIFI_BUF[1] == device_ID) || (WIFI_BUF[1] == 0x06)){
			 
			 	 switch(WIFI_BUF[2]){
				  
				  	 case 0x01:		 strcpy(userMe.userID,&(WIFI_BUF[3]));userID_write(userMe.userID);	//老师设置用户名
					 	  			 WIFI_PUTS("userID set");WIFI_PUTS(userMe.userID);		//测试wifi获取老师设置的用户名
						  			 break;
									 
					 case 0x02:		 strcpy(userMe.password,&(WIFI_BUF[3]));password_write(userMe.password);	//老师设置密码
					 	  			 WIFI_PUTS("password set");WIFI_PUTS(userMe.password);	//测试测试wifi获取老师设置的密码
									 break;
									 
					 case 0x10:		 for(loopa = 3;loopa < 7;loopa ++){						//老师设故解析
					 
					 	  			 	switch(WIFI_BUF[loopa]){
					 	  			 					 
					 	  			 	 	case  1:	dianfengshan_IO('T',1);	break;
										 	case  2:	dianfengshan_IO('T',2); break;
										 	case  3:	dianfengshan_IO('T',3);	break;
										 	case  4:	dianfengshan_IO('T',4);	break;
										 	case  5:	weibolu_IO('T',1);		break;
				 	  			 	 	 	case  6:	weibolu_IO('T',2);		break;
										 	case  7:	dianfanbao_IO('T',1);	break;
										 	case  8:	dianfanbao_IO('T',2);	break;
										 	case  9:	dianfanbao_IO('T',3);	break;
										 	case 10:	xiyiji_IO('T',1);		break;
										 	case 11:	xiyiji_IO('T',2);		break;
										 	case 12:	xiyiji_IO('T',3);		break;
										 	case 13:	xiaodugui_IO('T',1);	break;
										 	case 14:	xiaodugui_IO('T',2);	break;
											default:	break;
					 	  			 	 }
					 	  			 }
									 break;
									 
					 default:		 break;
				 }
				 //WIFI_BUF[1] = device_ID;
				 //WIFI_PUTS(WIFI_BUF);
			 	 memset(WIFI_BUF,0,sizeof(uchar)*UART0_RX_BUFFER_SIZE);
			 }
		 }
		 delay_ms(1500);			//测试延时
		 WIFI_PUTS(WIFI_BUF);		//测试WIFI缓存
		 
		 
	  /*********************************************PROCESSING_ITFR*********************************************/

		 if(ITFR_BUF[0] == 0x5a){		//包头解析
		 
		 	 switch(ITFR_BUF[1]){
			 
			 	  	case 0x01:		strcpy(userMe_temp.userID,&(ITFR_BUF[2]));			//学生输入用户名
						 			ITFR_PUTS("GOT userID");ITFR_PUTS(userMe_temp.userID);			//测试学生输入的用户名
						  			break;
					case 0x02:		strcpy(userMe_temp.password,&(ITFR_BUF[2]));		////学生输入密码
						 			ITFR_PUTS("GOT password set");ITFR_PUTS(userMe_temp.password);	//测试学生输入的密码
						 			break;
									
					case 0x10:		for(loopa = 0;loopa < 4;loopa ++)								//学生提交解故结果解析
						 				if(ITFR_BUF[loopa+3] == '1')dianfengshan_IO('S',loopa+1);
									break;
					case 0x20:		for(loopa = 0;loopa < 2;loopa ++)
						 				if(ITFR_BUF[loopa+3] == '1')weibolu_IO('S',loopa+1);
									break;	
					case 0x30:		for(loopa = 0;loopa < 3;loopa ++)
						 				if(ITFR_BUF[loopa+3] == '1')dianfanbao_IO('S',loopa+1);
									break;
					case 0x40:		for(loopa = 0;loopa < 3;loopa ++)
						 				if(ITFR_BUF[loopa+3] == '1')xiyiji_IO('S',loopa+1);
									break;
					case 0x50:		for(loopa = 0;loopa < 2;loopa ++)
						 				if(ITFR_BUF[loopa+3] == '1')xiaodugui_IO('S',loopa+1);
									break;
									
					default:		break;
			 }
		 }
		 memset(ITFR_BUF,0,sizeof(uchar)*UART1_RX_BUFFER_SIZE);
	 }
}

void main(void){

	
	
	bspInit();
		
	WIFI_PUTS("test start!!!");
	thread_test();
}