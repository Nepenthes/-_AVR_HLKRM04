Interrupt Vectors
    00000 940C 02B9 JMP	__start|__text_start
    00024 940C 0348 JMP	_uart0_rx_isr
    0003C 940C 03D2 JMP	_uart1_rx_isr

Program Code (text area)
__start|__text_start:
    002B9 EFCF      LDI	R28,0xFF
    002BA E1D0      LDI	R29,0x10
    002BB BFCD      OUT	0x3D,R28
    002BC BFDE      OUT	0x3E,R29
    002BD 51CE      SUBI	R28,0x1E
    002BE 40D0      SBCI	R29,0
    002BF EA0A      LDI	R16,0xAA
    002C0 8308      ST	Y,R16
    002C1 2400      CLR	R0
    002C2 ECE9      LDI	R30,0xC9
    002C3 E0F5      LDI	R31,5
    002C4 E017      LDI	R17,7
    002C5 33E3      CPI	R30,0x33
    002C6 07F1      CPC	R31,R17
    002C7 F011      BEQ	0x02CA
    002C8 9201      ST	Z+,R0
    002C9 CFFB      RJMP	0x02C5
    002CA 8300      ST	Z,R16
    002CB EAE8      LDI	R30,0xA8
    002CC E0F0      LDI	R31,0
    002CD E0A0      LDI	R26,0
    002CE E0B1      LDI	R27,1
    002CF E015      LDI	R17,5
    002D0 E000      LDI	R16,0
    002D1 BF0B      OUT	0x3B,R16
    002D2 37E1      CPI	R30,0x71
    002D3 07F1      CPC	R31,R17
    002D4 F021      BEQ	0x02D9
    002D5 95C8      LPM
    002D6 9631      ADIW	R30,1
    002D7 920D      ST	X+,R0
    002D8 CFF9      RJMP	0x02D2
    002D9 940E 0A8B CALL	_main
_exit:
    002DB CFFF      RJMP	_exit
_delay:
  i                    --> R20
  j                    --> R22
  ms                   --> R16
    002DC 940E 0CD8 CALL	push_xgsetF000
FILE: C:\Users\Administrator\Desktop\塔城设故板\Software\usart.c
(0001) #include "usart.h"
(0002) 
(0003) 
(0004) const uchar *WIFICmd[] = {
(0005) 
(0006) 	0  
(0007) };
(0008) 
(0009) const uchar *ITFRCmd[] = {
(0010) 
(0011) 	0  
(0012) };
(0013) 
(0014) static volatile uchar UART0_RxHead,UART1_RxHead;		//串口数据缓存游标
(0015) 
(0016) uchar UART0_RxBuff[UART0_RX_BUFFER_SIZE];				//串口0缓存
(0017) uchar UART1_RxBuff[UART1_RX_BUFFER_SIZE];				//串口1缓存
(0018) 
(0019) uchar UART0_RxBuff_Queue[BUFFER0_QLENTH][UART0_RX_BUFFER_SIZE];	  //串口0缓存队列
(0020) uchar UART1_RxBuff_Queue[BUFFER1_QLENTH][UART1_RX_BUFFER_SIZE];	  //串口1缓存队列
(0021) 
(0022) void delay(unsigned int ms){
(0023) 
(0024)  	 unsigned int i,j;
(0025) 	 for( i=0;i<ms;i++)
    002DE 2744      CLR	R20
    002DF 2755      CLR	R21
    002E0 C00B      RJMP	0x02EC
(0026) 	 for(j=0;j<1141;j++); //1141是在8MHz晶振下，通过软件仿真反复实验得到的数值
    002E1 2766      CLR	R22
    002E2 2777      CLR	R23
    002E3 C002      RJMP	0x02E6
    002E4 5F6F      SUBI	R22,0xFF
    002E5 4F7F      SBCI	R23,0xFF
    002E6 3765      CPI	R22,0x75
    002E7 E0E4      LDI	R30,4
    002E8 077E      CPC	R23,R30
    002E9 F3D0      BCS	0x02E4
    002EA 5F4F      SUBI	R20,0xFF
    002EB 4F5F      SBCI	R21,0xFF
    002EC 1740      CP	R20,R16
    002ED 0751      CPC	R21,R17
    002EE F390      BCS	0x02E1
    002EF 940C 0CDD JMP	pop_xgsetF000
(0027) }
(0028) 
(0029) void usart0Init(void){
(0030) 
(0031) 	 UART0_RxHead = 0;
_usart0Init:
    002F1 2422      CLR	R2
    002F2 9220 0732 STS	usart.c:UART0_RxHead,R2
(0032) 
(0033) 	 UCSR0B = 0x00;                   	//关闭UART00
    002F4 B82A      OUT	0x0A,R2
(0034) 	 UCSR0A =0x00;                     	//不使用倍速发送（异步）
    002F5 B82B      OUT	0x0B,R2
(0035) 	 UCSR0C =(1<<UCSZ01)|(1<<UCSZ00);   //数据位为8位
    002F6 E086      LDI	R24,6
    002F7 9380 0095 STS	0x95,R24
(0036) 	 UBRR0L=(FOSC/16/(BAUD0+1))%256;    //异步正常情况下的计算公式
    002F9 E384      LDI	R24,0x34
    002FA B989      OUT	0x09,R24
(0037) 	 UBRR0H=(FOSC/16/(BAUD0+1))/256;
    002FB 9220 0090 STS	0x90,R2
(0038) 	 UCSR0B =(1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0);     //接收使能和发送使能以及中断
    002FD E988      LDI	R24,0x98
    002FE B98A      OUT	0x0A,R24
    002FF 9508      RET
(0039) }
(0040) 
(0041) void usart1Init(void){
(0042) 
(0043) 	 UART1_RxHead = 0;
_usart1Init:
    00300 2422      CLR	R2
    00301 9220 0731 STS	usart.c:UART1_RxHead,R2
(0044) 
(0045)  	 UCSR1B = 0x00;   					//关闭USART1
    00303 9220 009A STS	0x9A,R2
(0046)  	 UCSR1A = 0x00;   					//不适使用倍速发送
    00305 9220 009B STS	0x9B,R2
(0047)  	 UCSR1C = (1<<UCSZ11)|(1<<UCSZ10);	//数据位为八位
    00307 E086      LDI	R24,6
    00308 9380 009D STS	0x9D,R24
(0048)  	 UBRR1L=(FOSC/16/(BAUD1+1))%256;	//异步正常模式下，UBRR的计算公式
    0030A E384      LDI	R24,0x34
    0030B 9380 0099 STS	0x99,R24
(0049)  	 UBRR1H=(FOSC/16/(BAUD1+1))/256;
    0030D 9220 0098 STS	0x98,R2
(0050)  	 UCSR1B =(1<<RXEN1)|(1<<TXEN1)|(1<<RXCIE1); 	//接收使能，传送使能以及中断
    0030F E988      LDI	R24,0x98
    00310 9380 009A STS	0x9A,R24
    00312 9508      RET
(0051) }
(0052) 
(0053) void putchar0(unsigned char c){  
(0054) 
(0055)      while (!(UCSR0A&(1<<UDRE0)));		//表明发送器已经准备就绪
_putchar0:
  c                    --> R16
    00313 9B5D      SBIS	0x0B,5
    00314 CFFE      RJMP	_putchar0
(0056)      UDR0=c;    						//将要发送的数据装入UDR0寄存器
    00315 B90C      OUT	0x0C,R16
    00316 9508      RET
(0057) }
(0058) 
(0059) void putchar1(unsigned char c){  
(0060) 
(0061)      while (!(UCSR1A&(1<<UDRE1)));
_putchar1:
  c                    --> R16
    00317 9020 009B LDS	R2,0x9B
    00319 FE25      SBRS	R2,5
    0031A CFFC      RJMP	_putchar1
(0062)   	 UDR1=c;    
    0031B 9300 009C STS	0x9C,R16
    0031D 9508      RET
_puts0:
  s                    --> R20
    0031E 934A      ST	-Y,R20
    0031F 935A      ST	-Y,R21
    00320 01A8      MOVW	R20,R16
(0063) }
(0064) 
(0065) void puts0(char *s){
    00321 C005      RJMP	0x0327
(0066) 	 
(0067) 	 while (*s){
(0068) 	 
(0069)   	 	 putchar0(*s);
    00322 01FA      MOVW	R30,R20
    00323 8100      LD	R16,Z
    00324 DFEE      RCALL	_putchar0
(0070) 		 s++;
    00325 5F4F      SUBI	R20,0xFF
    00326 4F5F      SBCI	R21,0xFF
    00327 01FA      MOVW	R30,R20
    00328 8020      LD	R2,Z
    00329 2022      TST	R2
    0032A F7B9      BNE	0x0322
(0071)     } 
(0072) 	
(0073) 	putchar0(0xff);	  //包尾标识
    0032B EF0F      LDI	R16,0xFF
    0032C DFE6      RCALL	_putchar0
(0074)  	putchar0(0xff);
    0032D EF0F      LDI	R16,0xFF
    0032E DFE4      RCALL	_putchar0
(0075) 	putchar0(0xff);
    0032F EF0F      LDI	R16,0xFF
    00330 DFE2      RCALL	_putchar0
    00331 9159      LD	R21,Y+
    00332 9149      LD	R20,Y+
    00333 9508      RET
_puts1:
  s                    --> R20
    00334 934A      ST	-Y,R20
    00335 935A      ST	-Y,R21
    00336 01A8      MOVW	R20,R16
(0076) }
(0077)  
(0078) void puts1(char *s){
    00337 C005      RJMP	0x033D
(0079) 
(0080) 	 while (*s){
(0081) 	 
(0082)   	 	 putchar1(*s);
    00338 01FA      MOVW	R30,R20
    00339 8100      LD	R16,Z
    0033A DFDC      RCALL	_putchar1
(0083) 		 s++;
    0033B 5F4F      SUBI	R20,0xFF
    0033C 4F5F      SBCI	R21,0xFF
    0033D 01FA      MOVW	R30,R20
    0033E 8020      LD	R2,Z
    0033F 2022      TST	R2
    00340 F7B9      BNE	0x0338
(0084) 	}
(0085) 	
(0086) 	putchar1('\r');   //包尾标识
    00341 E00D      LDI	R16,0xD
    00342 DFD4      RCALL	_putchar1
(0087)  	putchar1('\n');
    00343 E00A      LDI	R16,0xA
    00344 DFD2      RCALL	_putchar1
    00345 9159      LD	R21,Y+
    00346 9149      LD	R20,Y+
    00347 9508      RET
_uart0_rx_isr:
  crp                  --> R10
  data                 --> R20
  status               --> R22
  loop                 --> R22
    00348 920A      ST	-Y,R0
    00349 921A      ST	-Y,R1
    0034A 922A      ST	-Y,R2
    0034B 923A      ST	-Y,R3
    0034C 924A      ST	-Y,R4
    0034D 925A      ST	-Y,R5
    0034E 926A      ST	-Y,R6
    0034F 927A      ST	-Y,R7
    00350 928A      ST	-Y,R8
    00351 929A      ST	-Y,R9
    00352 930A      ST	-Y,R16
    00353 931A      ST	-Y,R17
    00354 932A      ST	-Y,R18
    00355 933A      ST	-Y,R19
    00356 938A      ST	-Y,R24
    00357 939A      ST	-Y,R25
    00358 93AA      ST	-Y,R26
    00359 93BA      ST	-Y,R27
    0035A 93EA      ST	-Y,R30
    0035B 93FA      ST	-Y,R31
    0035C B60F      IN	R0,0x3F
    0035D 920A      ST	-Y,R0
    0035E 940E 0CE2 CALL	push_xgsetF00C
    00360 9722      SBIW	R28,2
(0088) } 
(0089) 
(0090) #pragma interrupt_handler uart0_rx_isr:iv_USART0_RXC
(0091) void uart0_rx_isr(void){
(0092) 	 
(0093) 	uchar data,status,loop;
(0094) 	uchar crp = UART0_RxHead;
    00361 90A0 0732 LDS	R10,usart.c:UART0_RxHead
(0095) 	
(0096) 	data   = UDR0;
    00363 B14C      IN	R20,0x0C
(0097) 	status = UCSR0A;
    00364 B16B      IN	R22,0x0B
(0098) 
(0099) 	if(!(status & 0x18)){		
    00365 2F86      MOV	R24,R22
    00366 7188      ANDI	R24,0x18
    00367 F009      BEQ	0x0369
    00368 C04F      RJMP	0x03B8
(0100) 	
(0101) 		if((UART0_RxHead > (UART0_RX_BUFFER_SIZE-2)) || ((data == '\n') && (UART0_RxBuff[crp-1] == '\r'))){
    00369 E18C      LDI	R24,0x1C
    0036A 9020 0732 LDS	R2,usart.c:UART0_RxHead
    0036C 1582      CP	R24,R2
    0036D F060      BCS	0x037A
    0036E 304A      CPI	R20,0xA
    0036F F009      BEQ	0x0371
    00370 C039      RJMP	0x03AA
    00371 E182      LDI	R24,0x12
    00372 E097      LDI	R25,7
    00373 2DEA      MOV	R30,R10
    00374 27FF      CLR	R31
    00375 0FE8      ADD	R30,R24
    00376 1FF9      ADC	R31,R25
    00377 8180      LD	R24,Z
    00378 308D      CPI	R24,0xD
    00379 F581      BNE	0x03AA
(0102) 			
(0103) 			UART0_RxHead = 0;
    0037A 2422      CLR	R2
    0037B 9220 0732 STS	usart.c:UART0_RxHead,R2
(0104) 			
(0105) 			UART0_RxBuff[crp-1] = 0;
    0037D E182      LDI	R24,0x12
    0037E E097      LDI	R25,7
    0037F 2DEA      MOV	R30,R10
    00380 27FF      CLR	R31
    00381 0FE8      ADD	R30,R24
    00382 1FF9      ADC	R31,R25
    00383 8220      ST	Z,R2
(0106) 				
(0107) 			for(loop = BUFFER0_QLENTH;loop > 1;loop --)			
    00384 E065      LDI	R22,5
    00385 C010      RJMP	0x0396
(0108) 				strcpy(UART0_RxBuff_Queue[loop - 1],UART0_RxBuff_Queue[loop - 2]);
    00386 E10E      LDI	R16,0x1E
    00387 2F16      MOV	R17,R22
    00388 0301      MULSU	R16,R17
    00389 E283      LDI	R24,0x23
    0038A E096      LDI	R25,6
    0038B 0190      MOVW	R18,R0
    0038C 0F28      ADD	R18,R24
    0038D 1F39      ADC	R19,R25
    0038E E481      LDI	R24,0x41
    0038F E096      LDI	R25,6
    00390 0180      MOVW	R16,R0
    00391 0F08      ADD	R16,R24
    00392 1F19      ADC	R17,R25
    00393 940E 0C93 CALL	_strcpy
    00395 956A      DEC	R22
    00396 E081      LDI	R24,1
    00397 1786      CP	R24,R22
    00398 F368      BCS	0x0386
(0109) 				
(0110) 			strcpy(UART0_RxBuff_Queue[0],UART0_RxBuff);
    00399 E123      LDI	R18,0x13
    0039A E037      LDI	R19,7
    0039B E50F      LDI	R16,0x5F
    0039C E016      LDI	R17,6
    0039D 940E 0C93 CALL	_strcpy
(0111) 			memset(UART0_RxBuff,0,sizeof(uchar)*UART0_RX_BUFFER_SIZE);	//缓存清空
    0039F E18E      LDI	R24,0x1E
    003A0 E090      LDI	R25,0
    003A1 8399      STD	Y+1,R25
    003A2 8388      ST	Y,R24
    003A3 2722      CLR	R18
    003A4 2733      CLR	R19
    003A5 E103      LDI	R16,0x13
    003A6 E017      LDI	R17,7
    003A7 940E 0C7B CALL	_memset
(0112) 	
(0113) 		}else UART0_RxBuff[UART0_RxHead++] = data;
    003A9 C00E      RJMP	0x03B8
    003AA 9020 0732 LDS	R2,usart.c:UART0_RxHead
    003AC 2433      CLR	R3
    003AD 2D82      MOV	R24,R2
    003AE 5F8F      SUBI	R24,0xFF
    003AF 9380 0732 STS	usart.c:UART0_RxHead,R24
    003B1 E183      LDI	R24,0x13
    003B2 E097      LDI	R25,7
    003B3 2DE2      MOV	R30,R2
    003B4 27FF      CLR	R31
    003B5 0FE8      ADD	R30,R24
    003B6 1FF9      ADC	R31,R25
    003B7 8340      ST	Z,R20
(0114) 	}
    003B8 9622      ADIW	R28,2
    003B9 940E 0CE9 CALL	pop_xgsetF00C
    003BB 9009      LD	R0,Y+
    003BC BE0F      OUT	0x3F,R0
    003BD 91F9      LD	R31,Y+
    003BE 91E9      LD	R30,Y+
    003BF 91B9      LD	R27,Y+
    003C0 91A9      LD	R26,Y+
    003C1 9199      LD	R25,Y+
    003C2 9189      LD	R24,Y+
    003C3 9139      LD	R19,Y+
    003C4 9129      LD	R18,Y+
    003C5 9119      LD	R17,Y+
    003C6 9109      LD	R16,Y+
    003C7 9099      LD	R9,Y+
    003C8 9089      LD	R8,Y+
    003C9 9079      LD	R7,Y+
    003CA 9069      LD	R6,Y+
    003CB 9059      LD	R5,Y+
    003CC 9049      LD	R4,Y+
    003CD 9039      LD	R3,Y+
    003CE 9029      LD	R2,Y+
    003CF 9019      LD	R1,Y+
    003D0 9009      LD	R0,Y+
    003D1 9518      RETI
_uart1_rx_isr:
  crp                  --> R10
  data                 --> R20
  status               --> R22
  loop                 --> R22
    003D2 920A      ST	-Y,R0
    003D3 921A      ST	-Y,R1
    003D4 922A      ST	-Y,R2
    003D5 923A      ST	-Y,R3
    003D6 924A      ST	-Y,R4
    003D7 925A      ST	-Y,R5
    003D8 926A      ST	-Y,R6
    003D9 927A      ST	-Y,R7
    003DA 928A      ST	-Y,R8
    003DB 929A      ST	-Y,R9
    003DC 930A      ST	-Y,R16
    003DD 931A      ST	-Y,R17
    003DE 932A      ST	-Y,R18
    003DF 933A      ST	-Y,R19
    003E0 938A      ST	-Y,R24
    003E1 939A      ST	-Y,R25
    003E2 93AA      ST	-Y,R26
    003E3 93BA      ST	-Y,R27
    003E4 93EA      ST	-Y,R30
    003E5 93FA      ST	-Y,R31
    003E6 B60F      IN	R0,0x3F
    003E7 920A      ST	-Y,R0
    003E8 940E 0CE2 CALL	push_xgsetF00C
    003EA 9722      SBIW	R28,2
(0115) }
(0116) 
(0117) #pragma interrupt_handler uart1_rx_isr:iv_USART1_RXC
(0118) void uart1_rx_isr(void){
(0119) 	 
(0120) 	uchar data,status,loop;
(0121) 	uchar crp = UART1_RxHead;
    003EB 90A0 0731 LDS	R10,usart.c:UART1_RxHead
(0122) 	
(0123) 	data   = UDR1;
    003ED 9140 009C LDS	R20,0x9C
(0124) 	status = UCSR1A;
    003EF 9160 009B LDS	R22,0x9B
(0125) 
(0126) 	if(!(status & 0x18)){		
    003F1 2F86      MOV	R24,R22
    003F2 7188      ANDI	R24,0x18
    003F3 F009      BEQ	0x03F5
    003F4 C04F      RJMP	0x0444
(0127) 	
(0128) 		if((UART1_RxHead > (UART1_RX_BUFFER_SIZE-2)) || ((data == '\n') && (UART1_RxBuff[crp-1] == '\r'))){
    003F5 E18C      LDI	R24,0x1C
    003F6 9020 0731 LDS	R2,usart.c:UART1_RxHead
    003F8 1582      CP	R24,R2
    003F9 F060      BCS	0x0406
    003FA 304A      CPI	R20,0xA
    003FB F009      BEQ	0x03FD
    003FC C039      RJMP	0x0436
    003FD EF84      LDI	R24,0xF4
    003FE E096      LDI	R25,6
    003FF 2DEA      MOV	R30,R10
    00400 27FF      CLR	R31
    00401 0FE8      ADD	R30,R24
    00402 1FF9      ADC	R31,R25
    00403 8180      LD	R24,Z
    00404 308D      CPI	R24,0xD
    00405 F581      BNE	0x0436
(0129) 		
(0130) 			UART1_RxHead = 0;
    00406 2422      CLR	R2
    00407 9220 0731 STS	usart.c:UART1_RxHead,R2
(0131) 			
(0132) 			UART1_RxBuff[crp-1] = 0;
    00409 EF84      LDI	R24,0xF4
    0040A E096      LDI	R25,6
    0040B 2DEA      MOV	R30,R10
    0040C 27FF      CLR	R31
    0040D 0FE8      ADD	R30,R24
    0040E 1FF9      ADC	R31,R25
    0040F 8220      ST	Z,R2
(0133) 				
(0134) 			for(loop = BUFFER1_QLENTH;loop > 1;loop --)			
    00410 E065      LDI	R22,5
    00411 C010      RJMP	0x0422
(0135) 				strcpy(UART1_RxBuff_Queue[loop - 1],UART1_RxBuff_Queue[loop - 2]);
    00412 E10E      LDI	R16,0x1E
    00413 2F16      MOV	R17,R22
    00414 0301      MULSU	R16,R17
    00415 E88D      LDI	R24,0x8D
    00416 E095      LDI	R25,5
    00417 0190      MOVW	R18,R0
    00418 0F28      ADD	R18,R24
    00419 1F39      ADC	R19,R25
    0041A EA8B      LDI	R24,0xAB
    0041B E095      LDI	R25,5
    0041C 0180      MOVW	R16,R0
    0041D 0F08      ADD	R16,R24
    0041E 1F19      ADC	R17,R25
    0041F 940E 0C93 CALL	_strcpy
    00421 956A      DEC	R22
    00422 E081      LDI	R24,1
    00423 1786      CP	R24,R22
    00424 F368      BCS	0x0412
(0136) 				
(0137) 			strcpy(UART1_RxBuff_Queue[0],UART1_RxBuff);
    00425 EF25      LDI	R18,0xF5
    00426 E036      LDI	R19,6
    00427 EC09      LDI	R16,0xC9
    00428 E015      LDI	R17,5
    00429 940E 0C93 CALL	_strcpy
(0138) 			memset(UART1_RxBuff,0,sizeof(uchar)*UART1_RX_BUFFER_SIZE);	//缓存清空
    0042B E18E      LDI	R24,0x1E
    0042C E090      LDI	R25,0
    0042D 8399      STD	Y+1,R25
    0042E 8388      ST	Y,R24
    0042F 2722      CLR	R18
    00430 2733      CLR	R19
    00431 EF05      LDI	R16,0xF5
    00432 E016      LDI	R17,6
    00433 940E 0C7B CALL	_memset
(0139) 			
(0140) 		}else UART1_RxBuff[UART1_RxHead++] = data;		
    00435 C00E      RJMP	0x0444
    00436 9020 0731 LDS	R2,usart.c:UART1_RxHead
    00438 2433      CLR	R3
    00439 2D82      MOV	R24,R2
    0043A 5F8F      SUBI	R24,0xFF
    0043B 9380 0731 STS	usart.c:UART1_RxHead,R24
    0043D EF85      LDI	R24,0xF5
    0043E E096      LDI	R25,6
    0043F 2DE2      MOV	R30,R2
    00440 27FF      CLR	R31
    00441 0FE8      ADD	R30,R24
    00442 1FF9      ADC	R31,R25
    00443 8340      ST	Z,R20
(0141) 	}
    00444 9622      ADIW	R28,2
    00445 940E 0CE9 CALL	pop_xgsetF00C
    00447 9009      LD	R0,Y+
    00448 BE0F      OUT	0x3F,R0
    00449 91F9      LD	R31,Y+
    0044A 91E9      LD	R30,Y+
    0044B 91B9      LD	R27,Y+
    0044C 91A9      LD	R26,Y+
    0044D 9199      LD	R25,Y+
    0044E 9189      LD	R24,Y+
    0044F 9139      LD	R19,Y+
    00450 9129      LD	R18,Y+
    00451 9119      LD	R17,Y+
    00452 9109      LD	R16,Y+
    00453 9099      LD	R9,Y+
    00454 9089      LD	R8,Y+
    00455 9079      LD	R7,Y+
    00456 9069      LD	R6,Y+
    00457 9059      LD	R5,Y+
    00458 9049      LD	R4,Y+
    00459 9039      LD	R3,Y+
    0045A 9029      LD	R2,Y+
    0045B 9019      LD	R1,Y+
    0045C 9009      LD	R0,Y+
    0045D 9518      RETI
_ATTX_M1:
  time_point           --> R20
  rep                  --> R12
  wait_time            --> R14
  crp                  --> R10
  rec                  --> Y,+14
  command              --> Y,+12
  interface            --> R22
    0045E 933A      ST	-Y,R19
    0045F 932A      ST	-Y,R18
    00460 940E 0CC3 CALL	push_xgsetF0FC
    00462 2F60      MOV	R22,R16
    00463 9722      SBIW	R28,2
    00464 88A8      LDD	R10,Y+16
    00465 88EA      LDD	R14,Y+18
    00466 88FB      LDD	R15,Y+19
    00467 88CC      LDD	R12,Y+20
(0142) }
(0143) 
(0144) 
(0145) //输入：
(0146) //		interface：接口类型，'A'表示串口0，'B'表示串口1
(0147) //		command  ：命令
(0148) //		rec		 ：反馈
(0149) //		crp		 : 缓存游标
(0150) //		wait_time：单次等待时间
(0151) //		rep		 ：等待次数
(0152) //输出返回：
(0153) //		0：成功，1：失败
(0154) uchar ATTX_M1(uchar interface,uchar *command,uchar *rec,uchar crp,uint wait_time,uchar rep)
(0155) {
(0156) 	uchar time_point = 1;
    00468 E041      LDI	R20,1
(0157) 	
(0158) 	delay(100);
    00469 E604      LDI	R16,0x64
    0046A E010      LDI	R17,0
    0046B DE70      RCALL	_delay
(0159) 
(0160) 	if(interface == 'A'){
    0046C 3461      CPI	R22,0x41
    0046D F009      BEQ	0x046F
    0046E C03F      RJMP	0x04AE
    0046F C01F      RJMP	0x048F
(0161) 		
(0162) 		while(strcmp(rec,UART0_RxBuff_Queue[crp])){
(0163) 		
(0164) 			memset(UART0_RxBuff_Queue[crp],0,sizeof(uchar)*UART0_RX_BUFFER_SIZE);
    00470 E18E      LDI	R24,0x1E
    00471 E090      LDI	R25,0
    00472 8399      STD	Y+1,R25
    00473 8388      ST	Y,R24
    00474 2722      CLR	R18
    00475 2733      CLR	R19
    00476 E10E      LDI	R16,0x1E
    00477 2D1A      MOV	R17,R10
    00478 0301      MULSU	R16,R17
    00479 0180      MOVW	R16,R0
    0047A E58F      LDI	R24,0x5F
    0047B E096      LDI	R25,6
    0047C 0F08      ADD	R16,R24
    0047D 1F19      ADC	R17,R25
    0047E 940E 0C7B CALL	_memset
(0165) 			puts0(command);
    00480 850C      LDD	R16,Y+12
    00481 851D      LDD	R17,Y+13
    00482 DE9B      RCALL	_puts0
(0166) 			delay(wait_time);
    00483 0187      MOVW	R16,R14
    00484 DE57      RCALL	_delay
(0167) 			time_point++;
    00485 9543      INC	R20
(0168) 			if(time_point > rep)return 1;
    00486 2C2C      MOV	R2,R12
    00487 2433      CLR	R3
    00488 2E44      MOV	R4,R20
    00489 2455      CLR	R5
    0048A 1424      CP	R2,R4
    0048B 0435      CPC	R3,R5
    0048C F414      BGE	0x048F
    0048D E001      LDI	R16,1
    0048E C065      RJMP	0x04F4
    0048F E10E      LDI	R16,0x1E
    00490 2D1A      MOV	R17,R10
    00491 0301      MULSU	R16,R17
    00492 0190      MOVW	R18,R0
    00493 E58F      LDI	R24,0x5F
    00494 E096      LDI	R25,6
    00495 0F28      ADD	R18,R24
    00496 1F39      ADC	R19,R25
    00497 850E      LDD	R16,Y+14
    00498 851F      LDD	R17,Y+15
    00499 940E 0C86 CALL	_strcmp
    0049B 3000      CPI	R16,0
    0049C 0701      CPC	R16,R17
    0049D F691      BNE	0x0470
(0169) 		}
(0170) 		memset(UART0_RxBuff_Queue[crp],0,sizeof(uchar)*UART0_RX_BUFFER_SIZE);	//缓存清空
    0049E E18E      LDI	R24,0x1E
    0049F E090      LDI	R25,0
    004A0 8399      STD	Y+1,R25
    004A1 8388      ST	Y,R24
    004A2 2722      CLR	R18
    004A3 2733      CLR	R19
    004A4 E10E      LDI	R16,0x1E
    004A5 2D1A      MOV	R17,R10
    004A6 0301      MULSU	R16,R17
    004A7 0180      MOVW	R16,R0
    004A8 E58F      LDI	R24,0x5F
    004A9 E096      LDI	R25,6
    004AA 0F08      ADD	R16,R24
    004AB 1F19      ADC	R17,R25
    004AC 940E 0C7B CALL	_memset
(0171) 	}
(0172) 		
(0173) 	if(interface == 'B'){
    004AE 3462      CPI	R22,0x42
    004AF F009      BEQ	0x04B1
    004B0 C03F      RJMP	0x04F0
    004B1 C01F      RJMP	0x04D1
(0174) 		
(0175) 		while(strcmp(rec,UART1_RxBuff_Queue[crp])){
(0176) 		
(0177) 			memset(UART1_RxBuff_Queue[crp],0,sizeof(uchar)*UART1_RX_BUFFER_SIZE);
    004B2 E18E      LDI	R24,0x1E
    004B3 E090      LDI	R25,0
    004B4 8399      STD	Y+1,R25
    004B5 8388      ST	Y,R24
    004B6 2722      CLR	R18
    004B7 2733      CLR	R19
    004B8 E10E      LDI	R16,0x1E
    004B9 2D1A      MOV	R17,R10
    004BA 0301      MULSU	R16,R17
    004BB 0180      MOVW	R16,R0
    004BC EC89      LDI	R24,0xC9
    004BD E095      LDI	R25,5
    004BE 0F08      ADD	R16,R24
    004BF 1F19      ADC	R17,R25
    004C0 940E 0C7B CALL	_memset
(0178) 			puts1(command);
    004C2 850C      LDD	R16,Y+12
    004C3 851D      LDD	R17,Y+13
    004C4 DE6F      RCALL	_puts1
(0179) 			delay(wait_time);
    004C5 0187      MOVW	R16,R14
    004C6 DE15      RCALL	_delay
(0180) 			time_point++;
    004C7 9543      INC	R20
(0181) 			if(time_point > rep)return 1;
    004C8 2C2C      MOV	R2,R12
    004C9 2433      CLR	R3
    004CA 2E44      MOV	R4,R20
    004CB 2455      CLR	R5
    004CC 1424      CP	R2,R4
    004CD 0435      CPC	R3,R5
    004CE F414      BGE	0x04D1
    004CF E001      LDI	R16,1
    004D0 C023      RJMP	0x04F4
    004D1 E10E      LDI	R16,0x1E
    004D2 2D1A      MOV	R17,R10
    004D3 0301      MULSU	R16,R17
    004D4 0190      MOVW	R18,R0
    004D5 EC89      LDI	R24,0xC9
    004D6 E095      LDI	R25,5
    004D7 0F28      ADD	R18,R24
    004D8 1F39      ADC	R19,R25
    004D9 850E      LDD	R16,Y+14
    004DA 851F      LDD	R17,Y+15
    004DB 940E 0C86 CALL	_strcmp
    004DD 3000      CPI	R16,0
    004DE 0701      CPC	R16,R17
    004DF F691      BNE	0x04B2
(0182) 		}
(0183) 		memset(UART1_RxBuff_Queue[crp],0,sizeof(uchar)*UART1_RX_BUFFER_SIZE);	//缓存清空
    004E0 E18E      LDI	R24,0x1E
    004E1 E090      LDI	R25,0
    004E2 8399      STD	Y+1,R25
    004E3 8388      ST	Y,R24
    004E4 2722      CLR	R18
    004E5 2733      CLR	R19
    004E6 E10E      LDI	R16,0x1E
    004E7 2D1A      MOV	R17,R10
    004E8 0301      MULSU	R16,R17
    004E9 0180      MOVW	R16,R0
    004EA EC89      LDI	R24,0xC9
    004EB E095      LDI	R25,5
    004EC 0F08      ADD	R16,R24
    004ED 1F19      ADC	R17,R25
    004EE 940E 0C7B CALL	_memset
(0184) 	}
(0185) 		
(0186) 	delay(100);
    004F0 E604      LDI	R16,0x64
    004F1 E010      LDI	R17,0
    004F2 DDE9      RCALL	_delay
(0187) 	return 0;
    004F3 2700      CLR	R16
    004F4 9622      ADIW	R28,2
    004F5 940E 0CB8 CALL	pop_xgsetF0FC
    004F7 9622      ADIW	R28,2
    004F8 9508      RET
_ATTX_M2:
  freq                 --> R22
  time_point           --> R20
  over_time            --> R12
  crp                  --> R10
  rec                  --> Y,+14
  command              --> Y,+12
  interface            --> R14
    004F9 933A      ST	-Y,R19
    004FA 932A      ST	-Y,R18
    004FB 940E 0CC3 CALL	push_xgsetF0FC
    004FD 2EE0      MOV	R14,R16
    004FE 9722      SBIW	R28,2
    004FF 88A8      LDD	R10,Y+16
    00500 88CA      LDD	R12,Y+18
    00501 88DB      LDD	R13,Y+19
(0188) }
(0189) 
(0190) //输入：
(0191) //		interface：接口类型，'A'表示串口0，'B'表示串口1
(0192) //		command  ：命令
(0193) //		rec		 ：反馈
(0194) //		crp		 : 缓存游标
(0195) //		over_time：等待时间
(0196) //输出返回：
(0197) //		0：成功，1：失败
(0198) uchar ATTX_M2(uchar interface,uchar *command,uchar *rec,uchar crp,uint over_time)
(0199) {
(0200) 		
(0201) 	uint time_point = 1;
    00502 E041      LDI	R20,1
    00503 E050      LDI	R21,0
(0202) 	const uint freq = 200;			//轮询频次设定，200ms轮询一次
    00504 EC68      LDI	R22,0xC8
    00505 E070      LDI	R23,0
(0203) 	
(0204) 	delay(100);
    00506 E604      LDI	R16,0x64
    00507 E010      LDI	R17,0
    00508 DDD3      RCALL	_delay
(0205) 		
(0206) 	if(interface == 'A'){
    00509 2D8E      MOV	R24,R14
    0050A 3481      CPI	R24,0x41
    0050B F581      BNE	0x053C
(0207) 	
(0208) 		puts0(command);
    0050C 850C      LDD	R16,Y+12
    0050D 851D      LDD	R17,Y+13
    0050E DE0F      RCALL	_puts0
    0050F C00D      RJMP	0x051D
(0209) 		while(strcmp(rec,UART0_RxBuff_Queue[crp])){
(0210) 			
(0211) 				delay(freq);
    00510 018B      MOVW	R16,R22
    00511 DDCA      RCALL	_delay
(0212) 				if(time_point > over_time/freq)return 1;
    00512 019B      MOVW	R18,R22
    00513 0186      MOVW	R16,R12
    00514 940E 0C9E CALL	div16u
    00516 1704      CP	R16,R20
    00517 0715      CPC	R17,R21
    00518 F410      BCC	0x051B
    00519 E001      LDI	R16,1
    0051A C058      RJMP	0x0573
(0213) 				time_point++;
    0051B 5F4F      SUBI	R20,0xFF
    0051C 4F5F      SBCI	R21,0xFF
    0051D E10E      LDI	R16,0x1E
    0051E 2D1A      MOV	R17,R10
    0051F 0301      MULSU	R16,R17
    00520 0190      MOVW	R18,R0
    00521 E58F      LDI	R24,0x5F
    00522 E096      LDI	R25,6
    00523 0F28      ADD	R18,R24
    00524 1F39      ADC	R19,R25
    00525 850E      LDD	R16,Y+14
    00526 851F      LDD	R17,Y+15
    00527 940E 0C86 CALL	_strcmp
    00529 3000      CPI	R16,0
    0052A 0701      CPC	R16,R17
    0052B F721      BNE	0x0510
(0214) 		}
(0215) 		memset(UART0_RxBuff_Queue[crp],0,sizeof(uchar)*UART0_RX_BUFFER_SIZE);	//缓存清空
    0052C E18E      LDI	R24,0x1E
    0052D E090      LDI	R25,0
    0052E 8399      STD	Y+1,R25
    0052F 8388      ST	Y,R24
    00530 2722      CLR	R18
    00531 2733      CLR	R19
    00532 E10E      LDI	R16,0x1E
    00533 2D1A      MOV	R17,R10
    00534 0301      MULSU	R16,R17
    00535 0180      MOVW	R16,R0
    00536 E58F      LDI	R24,0x5F
    00537 E096      LDI	R25,6
    00538 0F08      ADD	R16,R24
    00539 1F19      ADC	R17,R25
    0053A 940E 0C7B CALL	_memset
(0216) 	}
(0217) 	
(0218) 	if(interface == 'B'){
    0053C 2D8E      MOV	R24,R14
    0053D 3482      CPI	R24,0x42
    0053E F581      BNE	0x056F
(0219) 	
(0220) 		puts1(command);
    0053F 850C      LDD	R16,Y+12
    00540 851D      LDD	R17,Y+13
    00541 DDF2      RCALL	_puts1
    00542 C00D      RJMP	0x0550
(0221) 		while(strcmp(rec,UART1_RxBuff_Queue[crp])){
(0222) 			
(0223) 				delay(freq);
    00543 018B      MOVW	R16,R22
    00544 DD97      RCALL	_delay
(0224) 				if(time_point > over_time/freq)return 1;
    00545 019B      MOVW	R18,R22
    00546 0186      MOVW	R16,R12
    00547 940E 0C9E CALL	div16u
    00549 1704      CP	R16,R20
    0054A 0715      CPC	R17,R21
    0054B F410      BCC	0x054E
    0054C E001      LDI	R16,1
    0054D C025      RJMP	0x0573
(0225) 				time_point++;
    0054E 5F4F      SUBI	R20,0xFF
    0054F 4F5F      SBCI	R21,0xFF
    00550 E10E      LDI	R16,0x1E
    00551 2D1A      MOV	R17,R10
    00552 0301      MULSU	R16,R17
    00553 0190      MOVW	R18,R0
    00554 EC89      LDI	R24,0xC9
    00555 E095      LDI	R25,5
    00556 0F28      ADD	R18,R24
    00557 1F39      ADC	R19,R25
    00558 850E      LDD	R16,Y+14
    00559 851F      LDD	R17,Y+15
    0055A 940E 0C86 CALL	_strcmp
    0055C 3000      CPI	R16,0
    0055D 0701      CPC	R16,R17
    0055E F721      BNE	0x0543
(0226) 		}
(0227) 		memset(UART1_RxBuff_Queue[crp],0,sizeof(uchar)*UART1_RX_BUFFER_SIZE);	//缓存清空
    0055F E18E      LDI	R24,0x1E
    00560 E090      LDI	R25,0
    00561 8399      STD	Y+1,R25
    00562 8388      ST	Y,R24
    00563 2722      CLR	R18
    00564 2733      CLR	R19
    00565 E10E      LDI	R16,0x1E
    00566 2D1A      MOV	R17,R10
    00567 0301      MULSU	R16,R17
    00568 0180      MOVW	R16,R0
    00569 EC89      LDI	R24,0xC9
    0056A E095      LDI	R25,5
    0056B 0F08      ADD	R16,R24
    0056C 1F19      ADC	R17,R25
    0056D 940E 0C7B CALL	_memset
(0228) 	}
(0229) 
(0230) 	delay(100);
    0056F E604      LDI	R16,0x64
    00570 E010      LDI	R17,0
    00571 DD6A      RCALL	_delay
(0231) 	return 0;
    00572 2700      CLR	R16
    00573 9622      ADIW	R28,2
    00574 940E 0CB8 CALL	pop_xgsetF0FC
    00576 9622      ADIW	R28,2
    00577 9508      RET
(0232) }
(0233) 
(0234) void usart_init(void){
(0235) 
(0236)   	SEI();
_usart_init:
    00578 9478      BSET	7
(0237) 	  
(0238) 	usart0Init();
    00579 DD77      RCALL	_usart0Init
(0239) 	usart1Init();	 
    0057A CD85      RJMP	_usart1Init
_usart_test:
  temp                 --> R10
    0057B 92AA      ST	-Y,R10
    0057C 9726      SBIW	R28,6
(0240) }
(0241) 
(0242) void usart_test(void)
(0243) {
(0244)  	  uchar temp = UART1_RxHead;
    0057D 90A0 0731 LDS	R10,usart.c:UART1_RxHead
(0245) 
(0246)   	  SEI();
    0057F 9478      BSET	7
(0247) 	  
(0248) 	  usart0Init();
    00580 DD70      RCALL	_usart0Init
(0249) 	  usart1Init();
    00581 DD7E      RCALL	_usart1Init
(0250) 	  
(0251) 	  ATTX_M2('B',"abc","bcd",0,9000);  
    00582 E288      LDI	R24,0x28
    00583 E293      LDI	R25,0x23
    00584 839D      STD	Y+5,R25
    00585 838C      STD	Y+4,R24
    00586 2422      CLR	R2
    00587 822A      STD	Y+2,R2
    00588 E084      LDI	R24,4
    00589 E091      LDI	R25,1
    0058A 8399      STD	Y+1,R25
    0058B 8388      ST	Y,R24
    0058C E028      LDI	R18,0x8
    0058D E031      LDI	R19,1
    0058E E402      LDI	R16,0x42
    0058F DF69      RCALL	_ATTX_M2
    00590 C014      RJMP	0x05A5
(0252) 	  
(0253) 	  while(1){
(0254) 	  		   temp = UART0_RxHead;
    00591 90A0 0732 LDS	R10,usart.c:UART0_RxHead
(0255) 	  
(0256) 	  		putchar1(UART1_RxBuff[temp-2]);
    00593 EF83      LDI	R24,0xF3
    00594 E096      LDI	R25,6
    00595 2DEA      MOV	R30,R10
    00596 27FF      CLR	R31
    00597 0FE8      ADD	R30,R24
    00598 1FF9      ADC	R31,R25
    00599 8100      LD	R16,Z
    0059A DD7C      RCALL	_putchar1
(0257) 			puts1(UART1_RxBuff_Queue[4]);
    0059B E401      LDI	R16,0x41
    0059C E016      LDI	R17,6
    0059D DD96      RCALL	_puts1
(0258) 			delay(500);
    0059E EF04      LDI	R16,0xF4
    0059F E011      LDI	R17,1
    005A0 DD3B      RCALL	_delay
(0259) 			if(UART1_RxBuff[0]){
    005A1 9020 06F5 LDS	R2,UART1_RxBuff
    005A3 2022      TST	R2
    005A4 F001      BEQ	0x05A5
    005A5 CFEB      RJMP	0x0591
    005A6 9626      ADIW	R28,6
    005A7 90A9      LD	R10,Y+
    005A8 9508      RET
FILE: C:\Users\Administrator\Desktop\塔城设故板\Software\user_main.c
(0001) #include "usart.h"
(0002) #include "IO_control.h"
(0003) 
(0004) const uchar *ITFR_CMD[4+2+3+3+2] = {
(0005) 
(0006) 	"res_fengshan.fs_res1.txt=\"0\"",			//1
(0007) 	"res_fengshan.fs_res2.txt=\"0\"",
(0008) 	"res_fengshan.fs_res3.txt=\"0\"",
(0009) 	"res_fengshan.fs_res4.txt=\"0\"",
(0010) 	
(0011) 	"res_dianfanbao.dfb_res1.txt=\"0\"",		//5
(0012) 	"res_dianfanbao.dfb_res2.txt=\"0\"",
(0013) 	"res_dianfanbao.dfb_res3.txt=\"0\"",
(0014) 	
(0015) 	"res_weibolu.wbl_res1.txt=\"0\"",			//8
(0016) 	"res_weibolu.wbl_res2.txt=\"0\"",
(0017) 	
(0018) 	"res_xiaodugui.xdg_res1.txt=\"0\"",			//10
(0019) 	"res_xiaodugui.xdg_res2.txt=\"0\""
(0020) 	
(0021) 	"res_xiyiji.xyj_res1.txt=\"0\"",			//12
(0022) 	"res_xiyiji.xyj_res2.txt=\"0\"",
(0023) 	"res_xiyiji.xyj_res3.txt=\"0\"",	
(0024) };
(0025) 
(0026) const uchar *WIFI_CMD[17] = {
(0027) 
(0028) 	"at+netmode=2",
(0029) 	"at+dhcpd=0",
(0030) 	"at+wifi_conf=GTA2017,wpawpa2_aes,gta114605",
(0031) 	"at+dhcpc=0",
(0032) 	"at+net_ip="device_IP",255.255.255.0,10.2.8.254",
(0033) 	"at+net_dns=202.96.128.86,202.96.134.33",
(0034) 	"at+remotepro=tcp",
(0035) 	"at+mode=client",
(0036) 	"at+remoteip=10.2.8.139",
(0037) 	"at+remoteport=8088",
(0038) 	"at+CLport=1234",
(0039) 	"at+timeout=0",
(0040) 	"at+uart=9600,8,n,1",
(0041) 	"at+uartpacklen=64",
(0042) 	"at+uartpacktimeout=10",
(0043) 	"at+net_commit=1",
(0044) 	"at+reconn=1"
(0045) };
(0046) 
(0047) const char cntConfirm[8] = {0x5a,device_ID,0x03,0x40,0x40,0x40,0x40};
(0048) 
(0049) extern uchar WIFI_BUF_QUE[BUFFER0_QLENTH][UART0_RX_BUFFER_SIZE];	
(0050) extern uchar ITFR_BUF_QUE[BUFFER1_QLENTH][UART1_RX_BUFFER_SIZE];	
(0051) 
(0052) extern infoMal infoMal_teacher;
(0053) extern infoMal infoMal_student;
(0054) 
(0055) extern uchar resIOJudge[9];	   		//老师设故与学生解故比较结果存放
(0056) 
(0057) infoUser userMe 	 = {"00000000","00000000"};
(0058) infoUser userMe_temp = {"00000000","00000000"};
(0059) 
(0060) uchar UI_pt = 0x00;	   		//UI界面游标，指向当前所显示界面
(0061) 
(0062) void delay_3us(void);
(0063) void wifiConnecting(void);
(0064) 
(0065) void delay_3us(void)  //3us延时函数,,可重复调用不影响精度 
(0066) {
(0067)    asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
_delay_3us:
    005A9 0000      NOP
    005AA 0000      NOP
    005AB 0000      NOP
    005AC 0000      NOP
    005AD 0000      NOP
    005AE 0000      NOP
(0068)    asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
    005AF 0000      NOP
    005B0 0000      NOP
    005B1 0000      NOP
    005B2 0000      NOP
    005B3 0000      NOP
    005B4 0000      NOP
(0069)    asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
    005B5 0000      NOP
    005B6 0000      NOP
    005B7 0000      NOP
    005B8 0000      NOP
    005B9 0000      NOP
    005BA 0000      NOP
    005BB 9508      RET
(0070) }
(0071) 
(0072) void delay_10us(void)  //10us延时函数,可重复调用不影响精度
(0073) {
(0074)  	delay_3us();
_delay_10us:
    005BC DFEC      RCALL	_delay_3us
(0075)  	delay_3us();
    005BD DFEB      RCALL	_delay_3us
(0076)  	delay_3us();
    005BE CFEA      RJMP	_delay_3us
(0077) }
(0078) 
(0079) void delay_50us(void)  //48us延时函数,可重复调用不影响精度
(0080) {      
(0081)   	delay_10us();    
_delay_50us:
    005BF DFFC      RCALL	_delay_10us
(0082)   	delay_10us();    
    005C0 DFFB      RCALL	_delay_10us
(0083)   	delay_10us();   
    005C1 DFFA      RCALL	_delay_10us
(0084)   	delay_10us();    
    005C2 DFF9      RCALL	_delay_10us
(0085)   	delay_10us();
    005C3 CFF8      RJMP	_delay_10us
(0086) }
(0087)  
(0088) void delay_100us(void)//exactly 98us延时函数,可重复调用不影响精度
(0089) {
(0090)   delay_50us();
_delay_100us:
    005C4 DFFA      RCALL	_delay_50us
(0091)   delay_50us();
    005C5 DFF9      RCALL	_delay_50us
(0092)   delay_3us();
    005C6 CFE2      RJMP	_delay_3us
(0093) }
(0094)  
(0095) void delay_1ms(void)            
(0096) {
(0097)   delay_100us(); delay_100us(); delay_100us(); delay_100us(); delay_100us();
_delay_1ms:
    005C7 DFFC      RCALL	_delay_100us
    005C8 DFFB      RCALL	_delay_100us
    005C9 DFFA      RCALL	_delay_100us
    005CA DFF9      RCALL	_delay_100us
    005CB DFF8      RCALL	_delay_100us
(0098)   delay_100us(); delay_100us(); delay_100us(); delay_100us(); delay_100us();
    005CC DFF7      RCALL	_delay_100us
    005CD DFF6      RCALL	_delay_100us
    005CE DFF5      RCALL	_delay_100us
    005CF DFF4      RCALL	_delay_100us
    005D0 CFF3      RJMP	_delay_100us
_delay_ms:
  ms                   --> R20
    005D1 934A      ST	-Y,R20
    005D2 935A      ST	-Y,R21
    005D3 01A8      MOVW	R20,R16
(0099) }
(0100)   
(0101)  void delay_ms(uint ms )
(0102) {
    005D4 C001      RJMP	0x05D6
(0103)     while(ms--)  
(0104) 		delay_1ms();//8MHZ主频时，25分钟误差小于1秒
    005D5 DFF1      RCALL	_delay_1ms
    005D6 011A      MOVW	R2,R20
    005D7 5041      SUBI	R20,1
    005D8 4050      SBCI	R21,0
    005D9 2022      TST	R2
    005DA F7D1      BNE	0x05D5
    005DB 2033      TST	R3
    005DC F7C1      BNE	0x05D5
    005DD 9159      LD	R21,Y+
    005DE 9149      LD	R20,Y+
    005DF 9508      RET
(0105) }
(0106) 
(0107) void EEPROM_write(uchar addr,uchar data){
(0108) 
(0109) 	while(EECR & BIT(EEWE));
_EEPROM_write:
  data                 --> R18
  addr                 --> R16
    005E0 99E1      SBIC	0x1C,1
    005E1 CFFE      RJMP	_EEPROM_write
(0110) 	EEAR=addr;
    005E2 2E20      MOV	R2,R16
    005E3 2433      CLR	R3
    005E4 BA3F      OUT	0x1F,R3
    005E5 BA2E      OUT	0x1E,R2
(0111) 	EEDR=data;
    005E6 BB2D      OUT	0x1D,R18
(0112) 	EECR|=BIT(EEMWE);
    005E7 9AE2      SBI	0x1C,2
(0113) 	EECR|=BIT(EEWE);
    005E8 9AE1      SBI	0x1C,1
    005E9 9508      RET
(0114) }
(0115) 
(0116) uchar EEPROM_read(uchar addr){
(0117) 
(0118)  	while(EECR & BIT(EEWE));
_EEPROM_read:
  addr                 --> R16
    005EA 99E1      SBIC	0x1C,1
    005EB CFFE      RJMP	_EEPROM_read
(0119) 	EEAR=addr;
    005EC 2E20      MOV	R2,R16
    005ED 2433      CLR	R3
    005EE BA3F      OUT	0x1F,R3
    005EF BA2E      OUT	0x1E,R2
(0120) 	EECR|=BIT(EERE);
    005F0 9AE0      SBI	0x1C,0
(0121) 	return EEDR;
    005F1 B30D      IN	R16,0x1D
    005F2 9508      RET
_userID_read:
  loop                 --> R20
  Dats                 --> R10
    005F3 940E 0CCE CALL	push_xgset300C
    005F5 0158      MOVW	R10,R16
(0122) }
(0123) 
(0124) void userID_read(uchar Dats[8]){
(0125) 	 
(0126) 	uchar loop;
(0127) 	
(0128) 	for(loop = 0;loop < 8;loop ++)
    005F6 2744      CLR	R20
    005F7 C009      RJMP	0x0601
(0129) 		Dats[loop] = EEPROM_read(loop+0x10);
    005F8 2F04      MOV	R16,R20
    005F9 5F00      SUBI	R16,0xF0
    005FA DFEF      RCALL	_EEPROM_read
    005FB 2FE4      MOV	R30,R20
    005FC 27FF      CLR	R31
    005FD 0DEA      ADD	R30,R10
    005FE 1DFB      ADC	R31,R11
    005FF 8300      ST	Z,R16
    00600 9543      INC	R20
    00601 3048      CPI	R20,0x8
    00602 F3A8      BCS	0x05F8
    00603 940C 0CD3 JMP	pop_xgset300C
_userID_write:
  loop                 --> R20
  Dats                 --> R10
    00605 940E 0CCE CALL	push_xgset300C
    00607 0158      MOVW	R10,R16
(0130) }
(0131) 
(0132) void userID_write(uchar Dats[8]){		   //eeprom读用户名
(0133) 	 
(0134) 	uchar loop;
(0135) 	
(0136) 	for(loop = 0;loop < 8;loop ++)
    00608 2744      CLR	R20
    00609 C009      RJMP	0x0613
(0137) 		EEPROM_write(loop+0x10,Dats[loop]);
    0060A 2FE4      MOV	R30,R20
    0060B 27FF      CLR	R31
    0060C 0DEA      ADD	R30,R10
    0060D 1DFB      ADC	R31,R11
    0060E 8120      LD	R18,Z
    0060F 2F04      MOV	R16,R20
    00610 5F00      SUBI	R16,0xF0
    00611 DFCE      RCALL	_EEPROM_write
    00612 9543      INC	R20
    00613 3048      CPI	R20,0x8
    00614 F3A8      BCS	0x060A
    00615 940C 0CD3 JMP	pop_xgset300C
_password_read:
  loop                 --> R20
  Dats                 --> R10
    00617 940E 0CCE CALL	push_xgset300C
    00619 0158      MOVW	R10,R16
(0138) }
(0139) 
(0140) 
(0141) void password_read(uchar Dats[8]){		   //eeprom读密码
(0142) 	 
(0143) 	uchar loop;
(0144) 	
(0145) 	for(loop = 0;loop < 8;loop ++)
    0061A 2744      CLR	R20
    0061B C009      RJMP	0x0625
(0146) 		Dats[loop] = EEPROM_read(loop+0x20);
    0061C 2F04      MOV	R16,R20
    0061D 5E00      SUBI	R16,0xE0
    0061E DFCB      RCALL	_EEPROM_read
    0061F 2FE4      MOV	R30,R20
    00620 27FF      CLR	R31
    00621 0DEA      ADD	R30,R10
    00622 1DFB      ADC	R31,R11
    00623 8300      ST	Z,R16
    00624 9543      INC	R20
    00625 3048      CPI	R20,0x8
    00626 F3A8      BCS	0x061C
    00627 940C 0CD3 JMP	pop_xgset300C
_password_write:
  loop                 --> R20
  Dats                 --> R10
    00629 940E 0CCE CALL	push_xgset300C
    0062B 0158      MOVW	R10,R16
(0147) }
(0148) 
(0149) void password_write(uchar Dats[8]){
(0150) 	 
(0151) 	uchar loop;
(0152) 	
(0153) 	for(loop = 0;loop < 8;loop ++)
    0062C 2744      CLR	R20
    0062D C009      RJMP	0x0637
(0154) 		EEPROM_write(loop+0x20,Dats[loop]);
    0062E 2FE4      MOV	R30,R20
    0062F 27FF      CLR	R31
    00630 0DEA      ADD	R30,R10
    00631 1DFB      ADC	R31,R11
    00632 8120      LD	R18,Z
    00633 2F04      MOV	R16,R20
    00634 5E00      SUBI	R16,0xE0
    00635 DFAA      RCALL	_EEPROM_write
    00636 9543      INC	R20
    00637 3048      CPI	R20,0x8
    00638 F3A8      BCS	0x062E
    00639 940C 0CD3 JMP	pop_xgset300C
_reaptRes:
  loop                 --> R20
    0063B 934A      ST	-Y,R20
(0155) }
(0156) 
(0157) void reaptRes(void){					   //提交结果
(0158) 
(0159) 	 uchar loop;
(0160) 	 
(0161) 	 for(loop = 0;loop < 4;loop ++)
    0063C 2744      CLR	R20
    0063D C010      RJMP	0x064E
(0162) 	 	if(resIOJudge[loop] == 0)resIOJudge[loop] = 0x40;
    0063E EC80      LDI	R24,0xC0
    0063F E095      LDI	R25,5
    00640 2FE4      MOV	R30,R20
    00641 27FF      CLR	R31
    00642 0FE8      ADD	R30,R24
    00643 1FF9      ADC	R31,R25
    00644 8020      LD	R2,Z
    00645 2022      TST	R2
    00646 F431      BNE	0x064D
    00647 2FE4      MOV	R30,R20
    00648 27FF      CLR	R31
    00649 0FE8      ADD	R30,R24
    0064A 1FF9      ADC	R31,R25
    0064B E480      LDI	R24,0x40
    0064C 8380      ST	Z,R24
    0064D 9543      INC	R20
    0064E 3044      CPI	R20,4
    0064F F370      BCS	0x063E
(0163) 
(0164) 	 WIFI_PUTC(0x5a);
    00650 E50A      LDI	R16,0x5A
    00651 940E 0317 CALL	_putchar1
(0165) 	 WIFI_PUTC(device_ID);
    00653 E004      LDI	R16,4
    00654 940E 0317 CALL	_putchar1
(0166) 	 WIFI_PUTC(0x20);
    00656 E200      LDI	R16,0x20
    00657 940E 0317 CALL	_putchar1
(0167) 	 WIFI_PUTS(resIOJudge);
    00659 EC00      LDI	R16,0xC0
    0065A E015      LDI	R17,5
    0065B 940E 0334 CALL	_puts1
    0065D 9149      LD	R20,Y+
    0065E 9508      RET
(0168) }
(0169) 
(0170) void bspInit(void)		   				   //初始化
(0171) {	
(0172)  	usart_init();						   //串口初始化
_bspInit:
    0065F 940E 0578 CALL	_usart_init
(0173) 	
(0174) 	ITFR_PUTS("page connecting");		   //首页
    00661 EA07      LDI	R16,0xA7
    00662 E012      LDI	R17,2
    00663 940E 031E CALL	_puts0
(0175) 	
(0176) 	IOReinstate();						   //端口复位及信息清空
    00665 940E 0AD3 CALL	_IOReinstate
(0177) 	
(0178) 	wifiConnecting();
    00667 D036      RCALL	_wifiConnecting
(0179) 	
(0180) 	userID_read(userMe.userID);			   //读用户
    00668 E502      LDI	R16,0x52
    00669 E011      LDI	R17,1
    0066A DF88      RCALL	_userID_read
(0181) 	password_read(userMe.password);		   //读密码
    0066B E50B      LDI	R16,0x5B
    0066C E011      LDI	R17,1
    0066D CFA9      RJMP	_password_read
_getConnect:
  loopa                --> R20
    0066E 934A      ST	-Y,R20
(0182) }
(0183) 
(0184) void getConnect(void){
(0185) 
(0186) 	uchar loopa;
(0187) 	
(0188) 	for(loopa = 0;loopa < 30;loopa ++){
    0066F 2744      CLR	R20
    00670 C007      RJMP	0x0678
(0189) 				  
(0190) 		WIFI_PUTC('+');
    00671 E20B      LDI	R16,0x2B
    00672 940E 0317 CALL	_putchar1
(0191) 		delay_ms(100);
    00674 E604      LDI	R16,0x64
    00675 E010      LDI	R17,0
    00676 DF5A      RCALL	_delay_ms
    00677 9543      INC	R20
    00678 314E      CPI	R20,0x1E
    00679 F3B8      BCS	0x0671
(0192) 	}
(0193) 		
(0194) 	for(loopa = 0;loopa < 17;loopa ++)
    0067A 2744      CLR	R20
    0067B C00D      RJMP	0x0689
(0195) 		WIFI_PUTS((uchar*)WIFI_CMD[loopa]);
    0067C E288      LDI	R24,0x28
    0067D E091      LDI	R25,1
    0067E 2FE4      MOV	R30,R20
    0067F 27FF      CLR	R31
    00680 0FEE      LSL	R30
    00681 1FFF      ROL	R31
    00682 0FE8      ADD	R30,R24
    00683 1FF9      ADC	R31,R25
    00684 8100      LD	R16,Z
    00685 8111      LDD	R17,Z+1
    00686 940E 0334 CALL	_puts1
    00688 9543      INC	R20
    00689 3141      CPI	R20,0x11
    0068A F388      BCS	0x067C
(0196) 		
(0197) 	delay_ms(500);
    0068B EF04      LDI	R16,0xF4
    0068C E011      LDI	R17,1
    0068D DF43      RCALL	_delay_ms
(0198) 	WIFI_PUTS("at+reconn=1");
    0068E EB07      LDI	R16,0xB7
    0068F E012      LDI	R17,2
    00690 940E 0334 CALL	_puts1
(0199) 	delay_ms(500);
    00692 EF04      LDI	R16,0xF4
    00693 E011      LDI	R17,1
    00694 DF3C      RCALL	_delay_ms
(0200) 	WIFI_PUTS("at+reconn=1");
    00695 EB07      LDI	R16,0xB7
    00696 E012      LDI	R17,2
    00697 940E 0334 CALL	_puts1
(0201) 	delay_ms(500);
    00699 EF04      LDI	R16,0xF4
    0069A E011      LDI	R17,1
    0069B DF35      RCALL	_delay_ms
    0069C 9149      LD	R20,Y+
    0069D 9508      RET
_wifiConnecting:
    0069E 9727      SBIW	R28,7
(0202) }
(0203) 
(0204) void wifiConnecting(void){	 			   //初始化连接
(0205) 	
(0206) 	ITFR_PUTS("page connecting");
    0069F EA07      LDI	R16,0xA7
    006A0 E012      LDI	R17,2
    006A1 940E 031E CALL	_puts0
(0207) 	UI_pt = 0x00;
    006A3 2422      CLR	R2
    006A4 9220 0176 STS	UI_pt,R2
    006A6 C020      RJMP	0x06C7
(0208) 	
(0209) 	while(1)
(0210) 	if(!ATTX_M1(WIFI,(char*)cntConfirm,(char*)cntConfirm,0,1000,6))
    006A7 E086      LDI	R24,6
    006A8 838E      STD	Y+6,R24
    006A9 EE88      LDI	R24,0xE8
    006AA E093      LDI	R25,3
    006AB 839D      STD	Y+5,R25
    006AC 838C      STD	Y+4,R24
    006AD 2422      CLR	R2
    006AE 822A      STD	Y+2,R2
    006AF E48A      LDI	R24,0x4A
    006B0 E091      LDI	R25,1
    006B1 8399      STD	Y+1,R25
    006B2 8388      ST	Y,R24
    006B3 E42A      LDI	R18,0x4A
    006B4 E031      LDI	R19,1
    006B5 E402      LDI	R16,0x42
    006B6 940E 045E CALL	_ATTX_M1
    006B8 2300      TST	R16
    006B9 F441      BNE	0x06C2
(0211) 	{
(0212) 	
(0213) 		ITFR_PUTS("page main");
    006BA E90D      LDI	R16,0x9D
    006BB E012      LDI	R17,2
    006BC 940E 031E CALL	_puts0
(0214) 		UI_pt = 0x01;
    006BE E081      LDI	R24,1
    006BF 9380 0176 STS	UI_pt,R24
(0215) 		return;
    006C1 C006      RJMP	0x06C8
(0216) 	}
(0217) 	else 
(0218) 	{
(0219) 	 	 
(0220) 	 	getConnect();
    006C2 DFAB      RCALL	_getConnect
(0221) 		ITFR_PUTS("page connecting");
    006C3 EA07      LDI	R16,0xA7
    006C4 E012      LDI	R17,2
    006C5 940E 031E CALL	_puts0
    006C7 CFDF      RJMP	0x06A7
    006C8 9627      ADIW	R28,7
    006C9 9508      RET
_wifiReconnect:
    006CA 934A      ST	-Y,R20
    006CB 935A      ST	-Y,R21
    006CC 9727      SBIW	R28,7
(0222) 	}
(0223) }
(0224) 
(0225) void wifiReconnect(void){			 		//中途断开重连
(0226) 	
(0227) 	ITFR_PUTS("page reconnect");
    006CD E80E      LDI	R16,0x8E
    006CE E012      LDI	R17,2
    006CF 940E 031E CALL	_puts0
    006D1 C02E      RJMP	0x0700
(0228) 	
(0229) 	while(1)
(0230) 	if(!ATTX_M1(WIFI,(char*)cntConfirm,(char*)cntConfirm,0,1000,6))
    006D2 E086      LDI	R24,6
    006D3 838E      STD	Y+6,R24
    006D4 EE88      LDI	R24,0xE8
    006D5 E093      LDI	R25,3
    006D6 839D      STD	Y+5,R25
    006D7 838C      STD	Y+4,R24
    006D8 2422      CLR	R2
    006D9 822A      STD	Y+2,R2
    006DA E48A      LDI	R24,0x4A
    006DB E091      LDI	R25,1
    006DC 8399      STD	Y+1,R25
    006DD 8388      ST	Y,R24
    006DE E42A      LDI	R18,0x4A
    006DF E031      LDI	R19,1
    006E0 E402      LDI	R16,0x42
    006E1 940E 045E CALL	_ATTX_M1
    006E3 2300      TST	R16
    006E4 F4B1      BNE	0x06FB
(0231) 	{
(0232) 	
(0233) 		switch(UI_pt){
    006E5 9140 0176 LDS	R20,UI_pt
    006E7 2755      CLR	R21
    006E8 3041      CPI	R20,1
    006E9 E0E0      LDI	R30,0
    006EA 075E      CPC	R21,R30
    006EB F029      BEQ	0x06F1
    006EC 3042      CPI	R20,2
    006ED E0E0      LDI	R30,0
    006EE 075E      CPC	R21,R30
    006EF F031      BEQ	0x06F6
    006F0 C010      RJMP	0x0701
(0234) 		
(0235) 			case 0x01:	ITFR_PUTS("page main");					   break;
    006F1 E90D      LDI	R16,0x9D
    006F2 E012      LDI	R17,2
    006F3 940E 031E CALL	_puts0
    006F5 C00B      RJMP	0x0701
(0236) 			case 0x02:	ITFR_PUTS("page device_select");		   break;
    006F6 E70B      LDI	R16,0x7B
    006F7 E012      LDI	R17,2
    006F8 940E 031E CALL	_puts0
(0237) 			default:	break;
(0238) 		}
(0239) 		return;
    006FA C006      RJMP	0x0701
(0240) 	}
(0241) 	else 
(0242) 	{
(0243) 	 	 
(0244) 	 	getConnect();
    006FB DF72      RCALL	_getConnect
(0245) 		ITFR_PUTS("page reconnect");
    006FC E80E      LDI	R16,0x8E
    006FD E012      LDI	R17,2
    006FE 940E 031E CALL	_puts0
    00700 CFD1      RJMP	0x06D2
    00701 9627      ADIW	R28,7
    00702 9159      LD	R21,Y+
    00703 9149      LD	R20,Y+
    00704 9508      RET
_thread_main:
  heartBeat_A          --> Y,+6
  heartBeat_B          --> Y,+2
  loopa                --> R20
  loopb                --> R22
    00705 940E 0CD8 CALL	push_xgsetF000
    00707 972A      SBIW	R28,0xA
(0246) 	}
(0247) }
(0248) 
(0249) void thread_main(void){
(0250) 
(0251) 	 uchar loopa,loopb;
(0252) 	 
(0253) 	 unsigned long  heartBeat_A,heartBeat_B;
(0254) 	 
(0255) 	 heartBeat_A = heartBeat_B = 0;
    00708 E080      LDI	R24,0
    00709 838A      STD	Y+2,R24
    0070A 838B      STD	Y+3,R24
    0070B 838C      STD	Y+4,R24
    0070C 838D      STD	Y+5,R24
    0070D E080      LDI	R24,0
    0070E 838E      STD	Y+6,R24
    0070F 838F      STD	Y+7,R24
    00710 8788      STD	Y+8,R24
    00711 8789      STD	Y+9,R24
    00712 C374      RJMP	0x0A87
(0256) 
(0257) 	 while(1){
(0258) 	 
(0259) 	 /*********************************************PROCESSING_WIFI*********************************************/
(0260) 		 
(0261) 		 //putchar0(0x30+strcmp(userMe_temp.userID,userMe.userID));				//用户名比较结果测试
(0262) 		 //putchar0(0x30+strcmp(userMe_temp.password,userMe.password));			//密码比较结果测试
(0263) 		 
(0264) 		 if(WIFI_BUF[0] == 0x5a){				//包头解析
    00713 9180 05C9 LDS	R24,UART1_RxBuff_Queue
    00715 358A      CPI	R24,0x5A
    00716 F009      BEQ	0x0718
    00717 C113      RJMP	0x082B
(0265) 		 
(0266) 		 	 if((WIFI_BUF[1] == device_ID) || (WIFI_BUF[1] == 0x06)){
    00718 9180 05CA LDS	R24,UART1_RxBuff_Queue+1
    0071A 3084      CPI	R24,4
    0071B F019      BEQ	0x071F
    0071C 3086      CPI	R24,6
    0071D F009      BEQ	0x071F
    0071E C10C      RJMP	0x082B
(0267) 			 
(0268) 			 	 switch(WIFI_BUF[2]){
    0071F 9140 05CB LDS	R20,UART1_RxBuff_Queue+2
    00721 2755      CLR	R21
    00722 3140      CPI	R20,0x10
    00723 E0E0      LDI	R30,0
    00724 075E      CPC	R21,R30
    00725 F1A9      BEQ	0x075B
    00726 E180      LDI	R24,0x10
    00727 E090      LDI	R25,0
    00728 1784      CP	R24,R20
    00729 0795      CPC	R25,R21
    0072A F074      BLT	0x0739
    0072B 3041      CPI	R20,1
    0072C E0E0      LDI	R30,0
    0072D 075E      CPC	R21,R30
    0072E F081      BEQ	0x073F
    0072F 3042      CPI	R20,2
    00730 E0E0      LDI	R30,0
    00731 075E      CPC	R21,R30
    00732 F0D1      BEQ	0x074D
    00733 3043      CPI	R20,3
    00734 E0E0      LDI	R30,0
    00735 075E      CPC	R21,R30
    00736 F409      BNE	0x0738
    00737 C0BC      RJMP	0x07F4
    00738 C0C0      RJMP	0x07F9
    00739 3340      CPI	R20,0x30
    0073A E0E0      LDI	R30,0
    0073B 075E      CPC	R21,R30
    0073C F409      BNE	0x073E
    0073D C0A5      RJMP	0x07E3
    0073E C0BA      RJMP	0x07F9
(0269) 				  
(0270) 				  	 case 0x01:		 strcpy(userMe.userID,&(WIFI_BUF[3]));userID_write(userMe.userID);	//老师设置用户名
    0073F EC2C      LDI	R18,0xCC
    00740 E035      LDI	R19,5
    00741 E502      LDI	R16,0x52
    00742 E011      LDI	R17,1
    00743 940E 0C93 CALL	_strcpy
    00745 E502      LDI	R16,0x52
    00746 E011      LDI	R17,1
    00747 DEBD      RCALL	_userID_write
(0271) 					 	  			 ITFR_PUTS("page main");
    00748 E90D      LDI	R16,0x9D
    00749 E012      LDI	R17,2
    0074A 940E 031E CALL	_puts0
(0272) 					 	  			 //WIFI_PUTS("userID set");WIFI_PUTS(userMe.userID);		//测试wifi获取老师设置的用户名
(0273) 						  			 break;
    0074C C0AC      RJMP	0x07F9
(0274) 									 
(0275) 					 case 0x02:		 strcpy(userMe.password,&(WIFI_BUF[3]));password_write(userMe.password);	//老师设置密码
    0074D EC2C      LDI	R18,0xCC
    0074E E035      LDI	R19,5
    0074F E50B      LDI	R16,0x5B
    00750 E011      LDI	R17,1
    00751 940E 0C93 CALL	_strcpy
    00753 E50B      LDI	R16,0x5B
    00754 E011      LDI	R17,1
    00755 DED3      RCALL	_password_write
(0276) 					 	  			 ITFR_PUTS("page main");
    00756 E90D      LDI	R16,0x9D
    00757 E012      LDI	R17,2
    00758 940E 031E CALL	_puts0
(0277) 					 	  			 //WIFI_PUTS("password set");WIFI_PUTS(userMe.password);	//测试测试wifi获取老师设置的密码
(0278) 									 break;
    0075A C09E      RJMP	0x07F9
(0279) 									 
(0280) 					 case 0x10:		 IOReinstate();			   									//避免重复设故，以最后一次为准，将上一次复位
    0075B 940E 0AD3 CALL	_IOReinstate
(0281) 					 	  			 ITFR_PUTS("device_select.dfs.txt=\"0\"");
    0075D E601      LDI	R16,0x61
    0075E E012      LDI	R17,2
    0075F 940E 031E CALL	_puts0
(0282) 									 ITFR_PUTS("device_select.dfb.txt=\"0\"");
    00761 E407      LDI	R16,0x47
    00762 E012      LDI	R17,2
    00763 940E 031E CALL	_puts0
(0283) 									 ITFR_PUTS("device_select.wbl.txt=\"0\"");
    00765 E20D      LDI	R16,0x2D
    00766 E012      LDI	R17,2
    00767 940E 031E CALL	_puts0
(0284) 									 ITFR_PUTS("device_select.xdg.txt=\"0\"");
    00769 E103      LDI	R16,0x13
    0076A E012      LDI	R17,2
    0076B 940E 031E CALL	_puts0
(0285) 									 ITFR_PUTS("device_select.xyj.txt=\"0\"");
    0076D EF09      LDI	R16,0xF9
    0076E E011      LDI	R17,1
    0076F 940E 031E CALL	_puts0
(0286) 									 
(0287) 					 	  			 for(loopa = 3;loopa < 17;loopa ++){						//老师设故解析,注意此处字节数有限制
    00771 E043      LDI	R20,3
    00772 C065      RJMP	0x07D8
(0288) 					 
(0289) 					 	  			 	switch(WIFI_BUF[loopa]){   								//设故板响应，设定成老师设故要求
    00773 EC89      LDI	R24,0xC9
    00774 E095      LDI	R25,5
    00775 2FE4      MOV	R30,R20
    00776 27FF      CLR	R31
    00777 0FE8      ADD	R30,R24
    00778 1FF9      ADC	R31,R25
    00779 8160      LD	R22,Z
    0077A 2777      CLR	R23
    0077B 3061      CPI	R22,1
    0077C E0E0      LDI	R30,0
    0077D 077E      CPC	R23,R30
    0077E F40C      BGE	0x0780
    0077F C057      RJMP	0x07D7
    00780 E08E      LDI	R24,0xE
    00781 E090      LDI	R25,0
    00782 1786      CP	R24,R22
    00783 0797      CPC	R25,R23
    00784 F40C      BGE	0x0786
    00785 C051      RJMP	0x07D7
    00786 E88C      LDI	R24,0x8C
    00787 E090      LDI	R25,0
    00788 01FB      MOVW	R30,R22
    00789 9731      SBIW	R30,1
    0078A 0FEE      LSL	R30
    0078B 1FFF      ROL	R31
    0078C 0FE8      ADD	R30,R24
    0078D 1FF9      ADC	R31,R25
    0078E 9027      ELPM	R2,Z+
    0078F 9036      ELPM	R3,Z
    00790 01F1      MOVW	R30,R2
    00791 9409      IJMP
(0290) 					 	  			 					 
(0291) 					 	  			 	 	case  1:	dianfengshan_IO('T',1);	break;
    00792 E021      LDI	R18,1
    00793 E504      LDI	R16,0x54
    00794 940E 0B0D CALL	_dianfengshan_IO
    00796 C040      RJMP	0x07D7
(0292) 										 	case  2:	dianfengshan_IO('T',2); break;
    00797 E022      LDI	R18,2
    00798 E504      LDI	R16,0x54
    00799 940E 0B0D CALL	_dianfengshan_IO
    0079B C03B      RJMP	0x07D7
(0293) 										 	case  3:	dianfengshan_IO('T',3);	break;
    0079C E023      LDI	R18,3
    0079D E504      LDI	R16,0x54
    0079E 940E 0B0D CALL	_dianfengshan_IO
    007A0 C036      RJMP	0x07D7
(0294) 										 	case  4:	dianfengshan_IO('T',4);	break;
    007A1 E024      LDI	R18,4
    007A2 E504      LDI	R16,0x54
    007A3 940E 0B0D CALL	_dianfengshan_IO
    007A5 C031      RJMP	0x07D7
(0295) 										 	case  5:	dianfanbao_IO('T',1);	break;
    007A6 E021      LDI	R18,1
    007A7 E504      LDI	R16,0x54
    007A8 940E 0B5F CALL	_dianfanbao_IO
    007AA C02C      RJMP	0x07D7
(0296) 				 	  			 	 	 	case  6:	dianfanbao_IO('T',2);	break;
    007AB E022      LDI	R18,2
    007AC E504      LDI	R16,0x54
    007AD 940E 0B5F CALL	_dianfanbao_IO
    007AF C027      RJMP	0x07D7
(0297) 										 	case  7:	dianfanbao_IO('T',3);	break;
    007B0 E023      LDI	R18,3
    007B1 E504      LDI	R16,0x54
    007B2 940E 0B5F CALL	_dianfanbao_IO
    007B4 C022      RJMP	0x07D7
(0298) 										 	case  8:	weibolu_IO('T',1);		break;
    007B5 E021      LDI	R18,1
    007B6 E504      LDI	R16,0x54
    007B7 940E 0BA9 CALL	_weibolu_IO
    007B9 C01D      RJMP	0x07D7
(0299) 										 	case  9:	weibolu_IO('T',2);		break;
    007BA E022      LDI	R18,2
    007BB E504      LDI	R16,0x54
    007BC 940E 0BA9 CALL	_weibolu_IO
    007BE C018      RJMP	0x07D7
(0300) 										 	case 10:	xiaodugui_IO('T',1);	break;
    007BF E021      LDI	R18,1
    007C0 E504      LDI	R16,0x54
    007C1 940E 0BE3 CALL	_xiaodugui_IO
    007C3 C013      RJMP	0x07D7
(0301) 										 	case 11:	xiaodugui_IO('T',2);	break;
    007C4 E022      LDI	R18,2
    007C5 E504      LDI	R16,0x54
    007C6 940E 0BE3 CALL	_xiaodugui_IO
    007C8 C00E      RJMP	0x07D7
(0302) 										 	case 12:	xiyiji_IO('T',1);		break;
    007C9 E021      LDI	R18,1
    007CA E504      LDI	R16,0x54
    007CB 940E 0C1D CALL	_xiyiji_IO
    007CD C009      RJMP	0x07D7
(0303) 										 	case 13:	xiyiji_IO('T',2);		break;
    007CE E022      LDI	R18,2
    007CF E504      LDI	R16,0x54
    007D0 940E 0C1D CALL	_xiyiji_IO
    007D2 C004      RJMP	0x07D7
(0304) 										 	case 14:	xiyiji_IO('T',3);		break;
    007D3 E023      LDI	R18,3
    007D4 E504      LDI	R16,0x54
    007D5 940E 0C1D CALL	_xiyiji_IO
    007D7 9543      INC	R20
    007D8 3141      CPI	R20,0x11
    007D9 F408      BCC	0x07DB
    007DA CF98      RJMP	0x0773
(0305) 											default:	break;
(0306) 					 	  			 	 }
(0307) 					 	  			 }
(0308) 									 WIFI_BUF[1] = device_ID; 					//修改ID，原包返回响应请求
    007DB E084      LDI	R24,4
    007DC 9380 05CA STS	UART1_RxBuff_Queue+1,R24
(0309) 				 					 WIFI_PUTS(WIFI_BUF);
    007DE EC09      LDI	R16,0xC9
    007DF E015      LDI	R17,5
    007E0 940E 0334 CALL	_puts1
(0310) 									 break;
    007E2 C016      RJMP	0x07F9
(0311) 									 
(0312) 					 case 0x30:		 IOReinstate(); 	 						//设备复位
    007E3 940E 0AD3 CALL	_IOReinstate
(0313) 					 	  			 ITFR_PUTS("page device_select");			//重新开放选择界面
    007E5 E70B      LDI	R16,0x7B
    007E6 E012      LDI	R17,2
    007E7 940E 031E CALL	_puts0
(0314) 									 UI_pt = 0x02;
    007E9 E082      LDI	R24,2
    007EA 9380 0176 STS	UI_pt,R24
(0315) 					 	  			 WIFI_BUF[1] = device_ID; 		 			//修改ID，原包返回响应请求
    007EC E084      LDI	R24,4
    007ED 9380 05CA STS	UART1_RxBuff_Queue+1,R24
(0316) 				 					 WIFI_PUTS(WIFI_BUF);
    007EF EC09      LDI	R16,0xC9
    007F0 E015      LDI	R17,5
    007F1 940E 0334 CALL	_puts1
(0317) 					 	  			 break;
    007F3 C005      RJMP	0x07F9
(0318) 									 
(0319) 					 case 0x03:		 heartBeat_B = 0; 		 					//确认连接，心跳标记清零
    007F4 E080      LDI	R24,0
    007F5 838A      STD	Y+2,R24
    007F6 838B      STD	Y+3,R24
    007F7 838C      STD	Y+4,R24
    007F8 838D      STD	Y+5,R24
(0320) 					 	  			 break;
(0321) 									 
(0322) 					 default:		 break;
(0323) 				 }
(0324) 				 
(0325) 		 		 if(infoMal_teacher.dianfengshan)ITFR_PUTS("device_select.dfs.txt=\"1\"");	//解冻设备选项				 
    007F9 9020 05B6 LDS	R2,infoMal_teacher
    007FB 2022      TST	R2
    007FC F021      BEQ	0x0801
    007FD ED0F      LDI	R16,0xDF
    007FE E011      LDI	R17,1
    007FF 940E 031E CALL	_puts0
(0326) 				 if(infoMal_teacher.dianfanbao)ITFR_PUTS("device_select.dfb.txt=\"1\"");
    00801 9020 05B7 LDS	R2,infoMal_teacher+1
    00803 2022      TST	R2
    00804 F021      BEQ	0x0809
    00805 EC05      LDI	R16,0xC5
    00806 E011      LDI	R17,1
    00807 940E 031E CALL	_puts0
(0327) 				 if(infoMal_teacher.weibolu)ITFR_PUTS("device_select.wbl.txt=\"1\"");
    00809 9020 05B8 LDS	R2,infoMal_teacher+2
    0080B 2022      TST	R2
    0080C F021      BEQ	0x0811
    0080D EA0B      LDI	R16,0xAB
    0080E E011      LDI	R17,1
    0080F 940E 031E CALL	_puts0
(0328) 				 if(infoMal_teacher.xiaodugui)ITFR_PUTS("device_select.xdg.txt=\"1\"");
    00811 9020 05B9 LDS	R2,infoMal_teacher+3
    00813 2022      TST	R2
    00814 F021      BEQ	0x0819
    00815 E901      LDI	R16,0x91
    00816 E011      LDI	R17,1
    00817 940E 031E CALL	_puts0
(0329) 				 if(infoMal_teacher.xiyiji)ITFR_PUTS("device_select.xyj.txt=\"1\"");
    00819 9020 05BA LDS	R2,infoMal_teacher+4
    0081B 2022      TST	R2
    0081C F021      BEQ	0x0821
    0081D E707      LDI	R16,0x77
    0081E E011      LDI	R17,1
    0081F 940E 031E CALL	_puts0
(0330) 			 	 memset(WIFI_BUF,0,sizeof(uchar)*UART0_RX_BUFFER_SIZE);
    00821 E18E      LDI	R24,0x1E
    00822 E090      LDI	R25,0
    00823 8399      STD	Y+1,R25
    00824 8388      ST	Y,R24
    00825 2722      CLR	R18
    00826 2733      CLR	R19
    00827 EC09      LDI	R16,0xC9
    00828 E015      LDI	R17,5
    00829 940E 0C7B CALL	_memset
(0331) 			 }
(0332) 		 }
(0333) 		 //delay_ms(1500);			//测试延时
(0334) 		 //WIFI_PUTS(WIFI_BUF);		//测试WIFI缓存
(0335) 		 
(0336) 		 
(0337) 	  /*********************************************PROCESSING_ITFR*********************************************/
(0338) 
(0339) 		 if(ITFR_BUF[0] == 0x5a){		//包头解析
    0082B 9180 065F LDS	R24,UART0_RxBuff_Queue
    0082D 358A      CPI	R24,0x5A
    0082E F009      BEQ	0x0830
    0082F C20C      RJMP	0x0A3C
(0340) 		 
(0341) 		 	 switch(ITFR_BUF[1]){
    00830 9160 0660 LDS	R22,UART0_RxBuff_Queue+1
    00832 2777      CLR	R23
    00833 3260      CPI	R22,0x20
    00834 E0E0      LDI	R30,0
    00835 077E      CPC	R23,R30
    00836 F409      BNE	0x0838
    00837 C08F      RJMP	0x08C7
    00838 E280      LDI	R24,0x20
    00839 E090      LDI	R25,0
    0083A 1786      CP	R24,R22
    0083B 0797      CPC	R25,R23
    0083C F0BC      BLT	0x0854
    0083D 3061      CPI	R22,1
    0083E E0E0      LDI	R30,0
    0083F 077E      CPC	R23,R30
    00840 F149      BEQ	0x086A
    00841 3062      CPI	R22,2
    00842 E0E0      LDI	R30,0
    00843 077E      CPC	R23,R30
    00844 F161      BEQ	0x0871
    00845 3061      CPI	R22,1
    00846 E0E0      LDI	R30,0
    00847 077E      CPC	R23,R30
    00848 F40C      BGE	0x084A
    00849 C1BB      RJMP	0x0A05
    0084A 306F      CPI	R22,0xF
    0084B E0E0      LDI	R30,0
    0084C 077E      CPC	R23,R30
    0084D F409      BNE	0x084F
    0084E C1B4      RJMP	0x0A03
    0084F 3160      CPI	R22,0x10
    00850 E0E0      LDI	R30,0
    00851 077E      CPC	R23,R30
    00852 F129      BEQ	0x0878
    00853 C1B1      RJMP	0x0A05
    00854 3460      CPI	R22,0x40
    00855 E0E0      LDI	R30,0
    00856 077E      CPC	R23,R30
    00857 F409      BNE	0x0859
    00858 C10C      RJMP	0x0965
    00859 E480      LDI	R24,0x40
    0085A E090      LDI	R25,0
    0085B 1786      CP	R24,R22
    0085C 0797      CPC	R25,R23
    0085D F034      BLT	0x0864
    0085E 3360      CPI	R22,0x30
    0085F E0E0      LDI	R30,0
    00860 077E      CPC	R23,R30
    00861 F409      BNE	0x0863
    00862 C0B3      RJMP	0x0916
    00863 C1A1      RJMP	0x0A05
    00864 3560      CPI	R22,0x50
    00865 E0E0      LDI	R30,0
    00866 077E      CPC	R23,R30
    00867 F409      BNE	0x0869
    00868 C14B      RJMP	0x09B4
    00869 C19B      RJMP	0x0A05
(0342) 			 
(0343) 			 	  	case 0x01:		strcpy(userMe_temp.userID,&(ITFR_BUF[2]));							//学生输入用户名
    0086A E621      LDI	R18,0x61
    0086B E036      LDI	R19,6
    0086C E604      LDI	R16,0x64
    0086D E011      LDI	R17,1
    0086E 940E 0C93 CALL	_strcpy
(0344) 						 			//ITFR_PUTS("GOT userID");ITFR_PUTS(userMe_temp.userID);			//测试学生输入的用户名
(0345) 						  			break;
    00870 C194      RJMP	0x0A05
(0346) 					case 0x02:		strcpy(userMe_temp.password,&(ITFR_BUF[2]));						//学生输入密码
    00871 E621      LDI	R18,0x61
    00872 E036      LDI	R19,6
    00873 E60D      LDI	R16,0x6D
    00874 E011      LDI	R17,1
    00875 940E 0C93 CALL	_strcpy
(0347) 						 			//ITFR_PUTS("GOT password set");ITFR_PUTS(userMe_temp.password);	//测试学生输入的密码
(0348) 						 			break;
    00877 C18D      RJMP	0x0A05
(0349) 									
(0350) 					case 0x10:		for(loopa = 0;loopa < 4;loopa ++)										   //学生提交解故结果解析，电分扇，4个设故点
    00878 2744      CLR	R20
    00879 C00F      RJMP	0x0889
(0351) 						 				if(ITFR_BUF[loopa+2] == '1')dianfengshan_IO('S',loopa+1);			   //设故板响应，设定成学生提交结果
    0087A E681      LDI	R24,0x61
    0087B E096      LDI	R25,6
    0087C 2FE4      MOV	R30,R20
    0087D 27FF      CLR	R31
    0087E 0FE8      ADD	R30,R24
    0087F 1FF9      ADC	R31,R25
    00880 8180      LD	R24,Z
    00881 3381      CPI	R24,0x31
    00882 F429      BNE	0x0888
    00883 2F24      MOV	R18,R20
    00884 5F2F      SUBI	R18,0xFF
    00885 E503      LDI	R16,0x53
    00886 940E 0B0D CALL	_dianfengshan_IO
    00888 9543      INC	R20
    00889 3044      CPI	R20,4
    0088A F378      BCS	0x087A
(0352) 										
(0353) 									OPJudje(infoMal_teacher.dianfengshan,infoMal_student.dianfengshan,1); 	   //比较学生提交结果与老是设定，得到仲裁结果		
    0088B E081      LDI	R24,1
    0088C 8388      ST	Y,R24
    0088D 9120 05BB LDS	R18,infoMal_student
    0088F 9100 05B6 LDS	R16,infoMal_teacher
    00891 940E 0AE9 CALL	_OPJudje
(0354) 									for(loopa = 0;loopa < 4;loopa ++)										   //每一位都比较，避免游标错位
    00893 2744      CLR	R20
    00894 C01D      RJMP	0x08B2
(0355) 									    for(loopb = 1;loopb <= 4;loopb ++)		  							   //向本地用户提交仲裁结果，只提交错误信息，loopb游标从1-4，表示故障1-4为电风扇故障
    00895 E061      LDI	R22,1
    00896 C017      RJMP	0x08AE
(0356) 										    if(resIOJudge[loopa] == loopb)ITFR_PUTS((char*)ITFR_CMD[loopb-1]); //向本地用户提交结果，只提交错误的设故标号，[loopb-1]为故障标号与数组索引差值
    00897 EC80      LDI	R24,0xC0
    00898 E095      LDI	R25,5
    00899 2FE4      MOV	R30,R20
    0089A 27FF      CLR	R31
    0089B 0FE8      ADD	R30,R24
    0089C 1FF9      ADC	R31,R25
    0089D 8020      LD	R2,Z
    0089E 1626      CP	R2,R22
    0089F F469      BNE	0x08AD
    008A0 E08C      LDI	R24,0xC
    008A1 E091      LDI	R25,1
    008A2 2FE6      MOV	R30,R22
    008A3 27FF      CLR	R31
    008A4 9731      SBIW	R30,1
    008A5 0FEE      LSL	R30
    008A6 1FFF      ROL	R31
    008A7 0FE8      ADD	R30,R24
    008A8 1FF9      ADC	R31,R25
    008A9 8100      LD	R16,Z
    008AA 8111      LDD	R17,Z+1
    008AB 940E 031E CALL	_puts0
    008AD 9563      INC	R22
    008AE E084      LDI	R24,4
    008AF 1786      CP	R24,R22
    008B0 F730      BCC	0x0897
    008B1 9543      INC	R20
    008B2 3044      CPI	R20,4
    008B3 F308      BCS	0x0895
(0357) 									
(0358) 									memset(resIOJudge,0,sizeof(uchar)*9);		  //清除比较信息结果缓存
    008B4 E089      LDI	R24,0x9
    008B5 E090      LDI	R25,0
    008B6 8399      STD	Y+1,R25
    008B7 8388      ST	Y,R24
    008B8 2722      CLR	R18
    008B9 2733      CLR	R19
    008BA EC00      LDI	R16,0xC0
    008BB E015      LDI	R17,5
    008BC 940E 0C7B CALL	_memset
(0359) 									OPJudje(0x00,infoMal_student.dianfengshan,1); //得到学生更改变动的故障对应的故障编号信息，不仲裁
    008BE E081      LDI	R24,1
    008BF 8388      ST	Y,R24
    008C0 9120 05BB LDS	R18,infoMal_student
    008C2 2700      CLR	R16
    008C3 940E 0AE9 CALL	_OPJudje
(0360) 									reaptRes();				//学生变动提交老师
    008C5 DD75      RCALL	_reaptRes
(0361) 										
(0362) 									break;
    008C6 C13E      RJMP	0x0A05
(0363) 									
(0364) 					case 0x20:		for(loopa = 0;loopa < 2;loopa ++)		  						//微波炉，2个设故点
    008C7 2744      CLR	R20
    008C8 C00F      RJMP	0x08D8
(0365) 						 				if(ITFR_BUF[loopa+2] == '1')weibolu_IO('S',loopa+1);		//loop+2为了跳过包头两个字节
    008C9 E681      LDI	R24,0x61
    008CA E096      LDI	R25,6
    008CB 2FE4      MOV	R30,R20
    008CC 27FF      CLR	R31
    008CD 0FE8      ADD	R30,R24
    008CE 1FF9      ADC	R31,R25
    008CF 8180      LD	R24,Z
    008D0 3381      CPI	R24,0x31
    008D1 F429      BNE	0x08D7
    008D2 2F24      MOV	R18,R20
    008D3 5F2F      SUBI	R18,0xFF
    008D4 E503      LDI	R16,0x53
    008D5 940E 0BA9 CALL	_weibolu_IO
    008D7 9543      INC	R20
    008D8 3042      CPI	R20,2
    008D9 F378      BCS	0x08C9
(0366) 										
(0367) 									OPJudje(infoMal_teacher.weibolu,infoMal_student.weibolu,8);		
    008DA E088      LDI	R24,0x8
    008DB 8388      ST	Y,R24
    008DC 9120 05BD LDS	R18,infoMal_student+2
    008DE 9100 05B8 LDS	R16,infoMal_teacher+2
    008E0 940E 0AE9 CALL	_OPJudje
(0368) 									for(loopa = 0;loopa < 2;loopa ++)				
    008E2 2744      CLR	R20
    008E3 C01D      RJMP	0x0901
(0369) 									    for(loopb = 8;loopb <= 9;loopb ++)										//8-9
    008E4 E068      LDI	R22,0x8
    008E5 C017      RJMP	0x08FD
(0370) 										    if(resIOJudge[loopa] == loopb)ITFR_PUTS((char*)ITFR_CMD[loopb-1]);
    008E6 EC80      LDI	R24,0xC0
    008E7 E095      LDI	R25,5
    008E8 2FE4      MOV	R30,R20
    008E9 27FF      CLR	R31
    008EA 0FE8      ADD	R30,R24
    008EB 1FF9      ADC	R31,R25
    008EC 8020      LD	R2,Z
    008ED 1626      CP	R2,R22
    008EE F469      BNE	0x08FC
    008EF E08C      LDI	R24,0xC
    008F0 E091      LDI	R25,1
    008F1 2FE6      MOV	R30,R22
    008F2 27FF      CLR	R31
    008F3 9731      SBIW	R30,1
    008F4 0FEE      LSL	R30
    008F5 1FFF      ROL	R31
    008F6 0FE8      ADD	R30,R24
    008F7 1FF9      ADC	R31,R25
    008F8 8100      LD	R16,Z
    008F9 8111      LDD	R17,Z+1
    008FA 940E 031E CALL	_puts0
    008FC 9563      INC	R22
    008FD E089      LDI	R24,0x9
    008FE 1786      CP	R24,R22
    008FF F730      BCC	0x08E6
    00900 9543      INC	R20
    00901 3042      CPI	R20,2
    00902 F308      BCS	0x08E4
(0371) 										
(0372) 									memset(resIOJudge,0,sizeof(uchar)*9);
    00903 E089      LDI	R24,0x9
    00904 E090      LDI	R25,0
    00905 8399      STD	Y+1,R25
    00906 8388      ST	Y,R24
    00907 2722      CLR	R18
    00908 2733      CLR	R19
    00909 EC00      LDI	R16,0xC0
    0090A E015      LDI	R17,5
    0090B 940E 0C7B CALL	_memset
(0373) 									OPJudje(0x00,infoMal_student.weibolu,8);
    0090D E088      LDI	R24,0x8
    0090E 8388      ST	Y,R24
    0090F 9120 05BD LDS	R18,infoMal_student+2
    00911 2700      CLR	R16
    00912 940E 0AE9 CALL	_OPJudje
(0374) 									reaptRes();
    00914 DD26      RCALL	_reaptRes
(0375) 																		
(0376) 									break;	
    00915 C0EF      RJMP	0x0A05
(0377) 									
(0378) 					case 0x30:		for(loopa = 0;loopa < 3;loopa ++)						   		 //电饭煲，3个设故点
    00916 2744      CLR	R20
    00917 C00F      RJMP	0x0927
(0379) 						 				if(ITFR_BUF[loopa+2] == '1')dianfanbao_IO('S',loopa+1);
    00918 E681      LDI	R24,0x61
    00919 E096      LDI	R25,6
    0091A 2FE4      MOV	R30,R20
    0091B 27FF      CLR	R31
    0091C 0FE8      ADD	R30,R24
    0091D 1FF9      ADC	R31,R25
    0091E 8180      LD	R24,Z
    0091F 3381      CPI	R24,0x31
    00920 F429      BNE	0x0926
    00921 2F24      MOV	R18,R20
    00922 5F2F      SUBI	R18,0xFF
    00923 E503      LDI	R16,0x53
    00924 940E 0B5F CALL	_dianfanbao_IO
    00926 9543      INC	R20
    00927 3043      CPI	R20,3
    00928 F378      BCS	0x0918
(0380) 										
(0381) 									OPJudje(infoMal_teacher.dianfanbao,infoMal_student.dianfanbao,5);	
    00929 E085      LDI	R24,5
    0092A 8388      ST	Y,R24
    0092B 9120 05BC LDS	R18,infoMal_student+1
    0092D 9100 05B7 LDS	R16,infoMal_teacher+1
    0092F 940E 0AE9 CALL	_OPJudje
(0382) 									for(loopa = 0;loopa < 3;loopa ++)							
    00931 2744      CLR	R20
    00932 C01D      RJMP	0x0950
(0383) 									    for(loopb = 5;loopb <= 7;loopb ++)										//5-7
    00933 E065      LDI	R22,5
    00934 C017      RJMP	0x094C
(0384) 										    if(resIOJudge[loopa] == loopb)ITFR_PUTS((char*)ITFR_CMD[loopb-1]);
    00935 EC80      LDI	R24,0xC0
    00936 E095      LDI	R25,5
    00937 2FE4      MOV	R30,R20
    00938 27FF      CLR	R31
    00939 0FE8      ADD	R30,R24
    0093A 1FF9      ADC	R31,R25
    0093B 8020      LD	R2,Z
    0093C 1626      CP	R2,R22
    0093D F469      BNE	0x094B
    0093E E08C      LDI	R24,0xC
    0093F E091      LDI	R25,1
    00940 2FE6      MOV	R30,R22
    00941 27FF      CLR	R31
    00942 9731      SBIW	R30,1
    00943 0FEE      LSL	R30
    00944 1FFF      ROL	R31
    00945 0FE8      ADD	R30,R24
    00946 1FF9      ADC	R31,R25
    00947 8100      LD	R16,Z
    00948 8111      LDD	R17,Z+1
    00949 940E 031E CALL	_puts0
    0094B 9563      INC	R22
    0094C E087      LDI	R24,7
    0094D 1786      CP	R24,R22
    0094E F730      BCC	0x0935
    0094F 9543      INC	R20
    00950 3043      CPI	R20,3
    00951 F308      BCS	0x0933
(0385) 									
(0386) 									memset(resIOJudge,0,sizeof(uchar)*9);	
    00952 E089      LDI	R24,0x9
    00953 E090      LDI	R25,0
    00954 8399      STD	Y+1,R25
    00955 8388      ST	Y,R24
    00956 2722      CLR	R18
    00957 2733      CLR	R19
    00958 EC00      LDI	R16,0xC0
    00959 E015      LDI	R17,5
    0095A 940E 0C7B CALL	_memset
(0387) 									OPJudje(0x00,infoMal_student.dianfanbao,5);
    0095C E085      LDI	R24,5
    0095D 8388      ST	Y,R24
    0095E 9120 05BC LDS	R18,infoMal_student+1
    00960 2700      CLR	R16
    00961 940E 0AE9 CALL	_OPJudje
(0388) 									reaptRes();
    00963 DCD7      RCALL	_reaptRes
(0389) 				
(0390) 									break;
    00964 C0A0      RJMP	0x0A05
(0391) 									
(0392) 					case 0x40:		for(loopa = 0;loopa < 3;loopa ++)								 //洗衣机，3个设故点
    00965 2744      CLR	R20
    00966 C00F      RJMP	0x0976
(0393) 						 				if(ITFR_BUF[loopa+2] == '1')xiyiji_IO('S',loopa+1);
    00967 E681      LDI	R24,0x61
    00968 E096      LDI	R25,6
    00969 2FE4      MOV	R30,R20
    0096A 27FF      CLR	R31
    0096B 0FE8      ADD	R30,R24
    0096C 1FF9      ADC	R31,R25
    0096D 8180      LD	R24,Z
    0096E 3381      CPI	R24,0x31
    0096F F429      BNE	0x0975
    00970 2F24      MOV	R18,R20
    00971 5F2F      SUBI	R18,0xFF
    00972 E503      LDI	R16,0x53
    00973 940E 0C1D CALL	_xiyiji_IO
    00975 9543      INC	R20
    00976 3043      CPI	R20,3
    00977 F378      BCS	0x0967
(0394) 										
(0395) 									OPJudje(infoMal_teacher.xiyiji,infoMal_student.xiyiji,12);		
    00978 E08C      LDI	R24,0xC
    00979 8388      ST	Y,R24
    0097A 9120 05BF LDS	R18,infoMal_student+4
    0097C 9100 05BA LDS	R16,infoMal_teacher+4
    0097E 940E 0AE9 CALL	_OPJudje
(0396) 									for(loopa = 0;loopa < 3;loopa ++)								
    00980 2744      CLR	R20
    00981 C01D      RJMP	0x099F
(0397) 									    for(loopb = 12;loopb <= 14;loopb ++)									//12-14
    00982 E06C      LDI	R22,0xC
    00983 C017      RJMP	0x099B
(0398) 										    if(resIOJudge[loopa] == loopb)ITFR_PUTS((char*)ITFR_CMD[loopb-1]);
    00984 EC80      LDI	R24,0xC0
    00985 E095      LDI	R25,5
    00986 2FE4      MOV	R30,R20
    00987 27FF      CLR	R31
    00988 0FE8      ADD	R30,R24
    00989 1FF9      ADC	R31,R25
    0098A 8020      LD	R2,Z
    0098B 1626      CP	R2,R22
    0098C F469      BNE	0x099A
    0098D E08C      LDI	R24,0xC
    0098E E091      LDI	R25,1
    0098F 2FE6      MOV	R30,R22
    00990 27FF      CLR	R31
    00991 9731      SBIW	R30,1
    00992 0FEE      LSL	R30
    00993 1FFF      ROL	R31
    00994 0FE8      ADD	R30,R24
    00995 1FF9      ADC	R31,R25
    00996 8100      LD	R16,Z
    00997 8111      LDD	R17,Z+1
    00998 940E 031E CALL	_puts0
    0099A 9563      INC	R22
    0099B E08E      LDI	R24,0xE
    0099C 1786      CP	R24,R22
    0099D F730      BCC	0x0984
    0099E 9543      INC	R20
    0099F 3043      CPI	R20,3
    009A0 F308      BCS	0x0982
(0399) 										
(0400) 									memset(resIOJudge,0,sizeof(uchar)*9);
    009A1 E089      LDI	R24,0x9
    009A2 E090      LDI	R25,0
    009A3 8399      STD	Y+1,R25
    009A4 8388      ST	Y,R24
    009A5 2722      CLR	R18
    009A6 2733      CLR	R19
    009A7 EC00      LDI	R16,0xC0
    009A8 E015      LDI	R17,5
    009A9 940E 0C7B CALL	_memset
(0401) 									OPJudje(0x00,infoMal_student.xiyiji,12);
    009AB E08C      LDI	R24,0xC
    009AC 8388      ST	Y,R24
    009AD 9120 05BF LDS	R18,infoMal_student+4
    009AF 2700      CLR	R16
    009B0 940E 0AE9 CALL	_OPJudje
(0402) 									reaptRes();
    009B2 DC88      RCALL	_reaptRes
(0403) 									
(0404) 									break;
    009B3 C051      RJMP	0x0A05
(0405) 									
(0406) 					case 0x50:		for(loopa = 0;loopa < 2;loopa ++)						  		 //消毒柜，2个设故点
    009B4 2744      CLR	R20
    009B5 C00F      RJMP	0x09C5
(0407) 						 				if(ITFR_BUF[loopa+2] == '1')xiaodugui_IO('S',loopa+1);
    009B6 E681      LDI	R24,0x61
    009B7 E096      LDI	R25,6
    009B8 2FE4      MOV	R30,R20
    009B9 27FF      CLR	R31
    009BA 0FE8      ADD	R30,R24
    009BB 1FF9      ADC	R31,R25
    009BC 8180      LD	R24,Z
    009BD 3381      CPI	R24,0x31
    009BE F429      BNE	0x09C4
    009BF 2F24      MOV	R18,R20
    009C0 5F2F      SUBI	R18,0xFF
    009C1 E503      LDI	R16,0x53
    009C2 940E 0BE3 CALL	_xiaodugui_IO
    009C4 9543      INC	R20
    009C5 3042      CPI	R20,2
    009C6 F378      BCS	0x09B6
(0408) 										
(0409) 									OPJudje(infoMal_teacher.xiaodugui,infoMal_student.xiaodugui,10);		
    009C7 E08A      LDI	R24,0xA
    009C8 8388      ST	Y,R24
    009C9 9120 05BE LDS	R18,infoMal_student+3
    009CB 9100 05B9 LDS	R16,infoMal_teacher+3
    009CD 940E 0AE9 CALL	_OPJudje
(0410) 									for(loopa = 0;loopa < 2;loopa ++)				
    009CF 2744      CLR	R20
    009D0 C01D      RJMP	0x09EE
(0411) 										for(loopb = 10;loopb <= 11;loopb ++)									//10-11
    009D1 E06A      LDI	R22,0xA
    009D2 C017      RJMP	0x09EA
(0412) 											if(resIOJudge[loopa] == loopb)ITFR_PUTS((char*)ITFR_CMD[loopb-1]);
    009D3 EC80      LDI	R24,0xC0
    009D4 E095      LDI	R25,5
    009D5 2FE4      MOV	R30,R20
    009D6 27FF      CLR	R31
    009D7 0FE8      ADD	R30,R24
    009D8 1FF9      ADC	R31,R25
    009D9 8020      LD	R2,Z
    009DA 1626      CP	R2,R22
    009DB F469      BNE	0x09E9
    009DC E08C      LDI	R24,0xC
    009DD E091      LDI	R25,1
    009DE 2FE6      MOV	R30,R22
    009DF 27FF      CLR	R31
    009E0 9731      SBIW	R30,1
    009E1 0FEE      LSL	R30
    009E2 1FFF      ROL	R31
    009E3 0FE8      ADD	R30,R24
    009E4 1FF9      ADC	R31,R25
    009E5 8100      LD	R16,Z
    009E6 8111      LDD	R17,Z+1
    009E7 940E 031E CALL	_puts0
    009E9 9563      INC	R22
    009EA E08B      LDI	R24,0xB
    009EB 1786      CP	R24,R22
    009EC F730      BCC	0x09D3
    009ED 9543      INC	R20
    009EE 3042      CPI	R20,2
    009EF F308      BCS	0x09D1
(0413) 										
(0414) 									memset(resIOJudge,0,sizeof(uchar)*9);
    009F0 E089      LDI	R24,0x9
    009F1 E090      LDI	R25,0
    009F2 8399      STD	Y+1,R25
    009F3 8388      ST	Y,R24
    009F4 2722      CLR	R18
    009F5 2733      CLR	R19
    009F6 EC00      LDI	R16,0xC0
    009F7 E015      LDI	R17,5
    009F8 940E 0C7B CALL	_memset
(0415) 									OPJudje(0x00,infoMal_student.xiaodugui,10);
    009FA E08A      LDI	R24,0xA
    009FB 8388      ST	Y,R24
    009FC 9120 05BE LDS	R18,infoMal_student+3
    009FE 2700      CLR	R16
    009FF 940E 0AE9 CALL	_OPJudje
(0416) 									reaptRes();
    00A01 DC39      RCALL	_reaptRes
(0417) 
(0418) 									//ITFR_PUTS("Result xiaodugui hand up");		//测试输出
(0419) 									//putchar1(resIOJudge[0]+0x30);	   				//测试比较结果输出
(0420) 									//putchar1(resIOJudge[1]+0x30);
(0421) 									//putchar1(resIOJudge[2]+0x30);
(0422) 									//putchar1(resIOJudge[3]+0x30);
(0423) 									//putchar1(resIOJudge[6]+0x30);
(0424) 									//putchar1(resIOJudge[7]+0x30);
(0425) 									//putchar1(resIOJudge[8]+0x30);										
(0426) 									break;
    00A02 C002      RJMP	0x0A05
(0427) 									
(0428) 					case 0x0f:		IOReinstate();									//结果提交完成，设备复位后重新开放选择界面
    00A03 940E 0AD3 CALL	_IOReinstate
(0429) 						 			//ITFR_PUTS("device_select.dfs.txt=\"0\"");		//冰封所有选项，等待老师重新设故
(0430) 									//ITFR_PUTS("device_select.wbl.txt=\"0\"");
(0431) 									//ITFR_PUTS("device_select.dfb.txt=\"0\"");
(0432) 									//ITFR_PUTS("device_select.xyj.txt=\"0\"");
(0433) 									//ITFR_PUTS("device_select.xdg.txt=\"0\"");								
(0434) 						 			//ITFR_PUTS("page device_select");				//开放设故选择界面
(0435) 									
(0436) 					default:		break;
(0437) 			 }
(0438) 			 
(0439) 			 if(!strcmp(userMe_temp.userID,userMe.userID) && !strcmp(userMe_temp.password,userMe.password)){	//用户名及密码验证
    00A05 E522      LDI	R18,0x52
    00A06 E031      LDI	R19,1
    00A07 E604      LDI	R16,0x64
    00A08 E011      LDI	R17,1
    00A09 940E 0C86 CALL	_strcmp
    00A0B 3000      CPI	R16,0
    00A0C 0701      CPC	R16,R17
    00A0D F481      BNE	0x0A1E
    00A0E E52B      LDI	R18,0x5B
    00A0F E031      LDI	R19,1
    00A10 E60D      LDI	R16,0x6D
    00A11 E011      LDI	R17,1
    00A12 940E 0C86 CALL	_strcmp
    00A14 3000      CPI	R16,0
    00A15 0701      CPC	R16,R17
    00A16 F439      BNE	0x0A1E
(0440) 		 			
(0441) 		 			ITFR_PUTS("page device_select");	//开放设故选择界面
    00A17 E70B      LDI	R16,0x7B
    00A18 E012      LDI	R17,2
    00A19 940E 031E CALL	_puts0
(0442) 					UI_pt = 0x02;
    00A1B E082      LDI	R24,2
    00A1C 9380 0176 STS	UI_pt,R24
(0443) 		 	 }
(0444) 		 	 memset(ITFR_BUF,0,sizeof(uchar)*UART1_RX_BUFFER_SIZE);		  //屏幕处理缓存清空
    00A1E E18E      LDI	R24,0x1E
    00A1F E090      LDI	R25,0
    00A20 8399      STD	Y+1,R25
    00A21 8388      ST	Y,R24
    00A22 2722      CLR	R18
    00A23 2733      CLR	R19
    00A24 E50F      LDI	R16,0x5F
    00A25 E016      LDI	R17,6
    00A26 940E 0C7B CALL	_memset
(0445) 			 memset(userMe_temp.password,0,sizeof(uchar)*9);			  //用户输入密码清空
    00A28 E089      LDI	R24,0x9
    00A29 E090      LDI	R25,0
    00A2A 8399      STD	Y+1,R25
    00A2B 8388      ST	Y,R24
    00A2C 2722      CLR	R18
    00A2D 2733      CLR	R19
    00A2E E60D      LDI	R16,0x6D
    00A2F E011      LDI	R17,1
    00A30 940E 0C7B CALL	_memset
(0446) 		 	 memset(resIOJudge,0,sizeof(uchar)*9);						  //学生提交与老师设故仲裁结果清空
    00A32 E089      LDI	R24,0x9
    00A33 E090      LDI	R25,0
    00A34 8399      STD	Y+1,R25
    00A35 8388      ST	Y,R24
    00A36 2722      CLR	R18
    00A37 2733      CLR	R19
    00A38 EC00      LDI	R16,0xC0
    00A39 E015      LDI	R17,5
    00A3A 940E 0C7B CALL	_memset
(0447) 		}
(0448) 		
(0449) 	  /*********************************************PROCESSING_HEARTBEAT*******************************************/
(0450) 	  	if(heartBeat_A > 300000){
    00A3C EE80      LDI	R24,0xE0
    00A3D E993      LDI	R25,0x93
    00A3E E0A4      LDI	R26,4
    00A3F E0B0      LDI	R27,0
    00A40 802E      LDD	R2,Y+6
    00A41 803F      LDD	R3,Y+7
    00A42 8448      LDD	R4,Y+8
    00A43 8459      LDD	R5,Y+9
    00A44 1582      CP	R24,R2
    00A45 0593      CPC	R25,R3
    00A46 05A4      CPC	R26,R4
    00A47 05B5      CPC	R27,R5
    00A48 F450      BCC	0x0A53
(0451) 		
(0452) 			heartBeat_A = 0;	   
    00A49 E080      LDI	R24,0
    00A4A 838E      STD	Y+6,R24
    00A4B 838F      STD	Y+7,R24
    00A4C 8788      STD	Y+8,R24
    00A4D 8789      STD	Y+9,R24
(0453) 			WIFI_PUTS((char*)cntConfirm);
    00A4E E40A      LDI	R16,0x4A
    00A4F E011      LDI	R17,1
    00A50 940E 0334 CALL	_puts1
(0454) 		}else heartBeat_A ++;
    00A52 C010      RJMP	0x0A63
    00A53 E081      LDI	R24,1
    00A54 E090      LDI	R25,0
    00A55 E0A0      LDI	R26,0
    00A56 E0B0      LDI	R27,0
    00A57 802E      LDD	R2,Y+6
    00A58 803F      LDD	R3,Y+7
    00A59 8448      LDD	R4,Y+8
    00A5A 8459      LDD	R5,Y+9
    00A5B 0E28      ADD	R2,R24
    00A5C 1E39      ADC	R3,R25
    00A5D 1E4A      ADC	R4,R26
    00A5E 1E5B      ADC	R5,R27
    00A5F 822E      STD	Y+6,R2
    00A60 823F      STD	Y+7,R3
    00A61 8648      STD	Y+8,R4
    00A62 8659      STD	Y+9,R5
(0455) 		
(0456) 		if(heartBeat_B > 1000000){
    00A63 E480      LDI	R24,0x40
    00A64 E492      LDI	R25,0x42
    00A65 E0AF      LDI	R26,0xF
    00A66 E0B0      LDI	R27,0
    00A67 802A      LDD	R2,Y+2
    00A68 803B      LDD	R3,Y+3
    00A69 804C      LDD	R4,Y+4
    00A6A 805D      LDD	R5,Y+5
    00A6B 1582      CP	R24,R2
    00A6C 0593      CPC	R25,R3
    00A6D 05A4      CPC	R26,R4
    00A6E 05B5      CPC	R27,R5
    00A6F F438      BCC	0x0A77
(0457) 			
(0458) 			heartBeat_B = 0;
    00A70 E080      LDI	R24,0
    00A71 838A      STD	Y+2,R24
    00A72 838B      STD	Y+3,R24
    00A73 838C      STD	Y+4,R24
    00A74 838D      STD	Y+5,R24
(0459) 			wifiReconnect();
    00A75 DC54      RCALL	_wifiReconnect
(0460) 		}else heartBeat_B ++;
    00A76 C010      RJMP	0x0A87
    00A77 E081      LDI	R24,1
    00A78 E090      LDI	R25,0
    00A79 E0A0      LDI	R26,0
    00A7A E0B0      LDI	R27,0
    00A7B 802A      LDD	R2,Y+2
    00A7C 803B      LDD	R3,Y+3
    00A7D 804C      LDD	R4,Y+4
    00A7E 805D      LDD	R5,Y+5
    00A7F 0E28      ADD	R2,R24
    00A80 1E39      ADC	R3,R25
    00A81 1E4A      ADC	R4,R26
    00A82 1E5B      ADC	R5,R27
    00A83 822A      STD	Y+2,R2
    00A84 823B      STD	Y+3,R3
    00A85 824C      STD	Y+4,R4
    00A86 825D      STD	Y+5,R5
    00A87 CC8B      RJMP	0x0713
    00A88 962A      ADIW	R28,0xA
    00A89 940C 0CDD JMP	pop_xgsetF000
(0461) 	}
(0462) }
(0463) 
(0464) void main(void){
(0465) 
(0466) 	
(0467) 	
(0468) 	bspInit();
_main:
    00A8B DBD3      RCALL	_bspInit
(0469) 	
(0470) 	//WIFI_PUTS("i'm WIFI test start!!!");
(0471) 	//ITFR_PUTS("i'm ITFR test start!!!");
(0472) 	//IO_test();
(0473) 	
(0474) 	thread_main();
    00A8C CC78      RJMP	_thread_main
FILE: C:\Users\Administrator\Desktop\塔城设故板\Software\IO_control.c
(0001) #include "IO_control.h"
(0002) 
(0003) infoMal infoMal_teacher = {0,0,0,0,0};
(0004) infoMal infoMal_student = {0,0,0,0,0};
(0005) 
(0006) uchar resIOJudge[9] = {0};
(0007) 
(0008) void IOInit(void){
(0009) 
(0010) 	DDRA  |= 0x55; 	DDRB  |= 0x55;	DDRC  |= 0x55;	DDRF  |= 0x05;
_IOInit:
    00A8D B38A      IN	R24,0x1A
    00A8E 6585      ORI	R24,0x55
    00A8F BB8A      OUT	0x1A,R24
    00A90 B387      IN	R24,0x17
    00A91 6585      ORI	R24,0x55
    00A92 BB87      OUT	0x17,R24
    00A93 B384      IN	R24,0x14
    00A94 6585      ORI	R24,0x55
    00A95 BB84      OUT	0x14,R24
    00A96 9180 0061 LDS	R24,0x61
    00A98 6085      ORI	R24,5
    00A99 9380 0061 STS	0x61,R24
(0011) 	PORTA |= 0x55; 	PORTB |= 0x55;	PORTC |= 0x55;	PORTF |= 0x05;
    00A9B B38B      IN	R24,0x1B
    00A9C 6585      ORI	R24,0x55
    00A9D BB8B      OUT	0x1B,R24
    00A9E B388      IN	R24,0x18
    00A9F 6585      ORI	R24,0x55
    00AA0 BB88      OUT	0x18,R24
    00AA1 B385      IN	R24,0x15
    00AA2 6585      ORI	R24,0x55
    00AA3 BB85      OUT	0x15,R24
    00AA4 9180 0062 LDS	R24,0x62
    00AA6 6085      ORI	R24,5
    00AA7 9380 0062 STS	0x62,R24
    00AA9 9508      RET
(0012) }
(0013) 
(0014) void IO_test(void){
(0015) 
(0016) 	uint a = 65535;
_IO_test:
  a                    --> R16
    00AAA EF0F      LDI	R16,0xFF
    00AAB EF1F      LDI	R17,0xFF
    00AAC C024      RJMP	0x0AD1
(0017) 
(0018) 	while(1){
(0019)  
(0020)  	 	DDRA  = 0x01;
    00AAD E081      LDI	R24,1
    00AAE BB8A      OUT	0x1A,R24
(0021) 	 	PORTA = 0x01;
    00AAF BB8B      OUT	0x1B,R24
(0022) 		
(0023) 		DDRF  = 0x00;
    00AB0 2422      CLR	R2
    00AB1 9220 0061 STS	0x61,R2
(0024) 	 	PORTF = 0x00;
    00AB3 9220 0062 STS	0x62,R2
    00AB5 C001      RJMP	0x0AB7
(0025) 
(0026) 		while(--a)asm("nop");
    00AB6 0000      NOP
    00AB7 01C8      MOVW	R24,R16
    00AB8 9701      SBIW	R24,1
    00AB9 018C      MOVW	R16,R24
    00ABA 3000      CPI	R16,0
    00ABB 0701      CPC	R16,R17
    00ABC F7C9      BNE	0x0AB6
(0027) 		a = 65535;
    00ABD EF0F      LDI	R16,0xFF
    00ABE EF1F      LDI	R17,0xFF
(0028) 
(0029) 	 	DDRA  = 0x00;
    00ABF 2422      CLR	R2
    00AC0 BA2A      OUT	0x1A,R2
(0030) 	 	PORTA = 0x00;
    00AC1 BA2B      OUT	0x1B,R2
(0031) 		
(0032) 		DDRF  = 0x04;
    00AC2 E084      LDI	R24,4
    00AC3 9380 0061 STS	0x61,R24
(0033) 	 	PORTF = 0x04;
    00AC5 9380 0062 STS	0x62,R24
    00AC7 C001      RJMP	0x0AC9
(0034) 	
(0035) 		while(--a)asm("nop");
    00AC8 0000      NOP
    00AC9 01C8      MOVW	R24,R16
    00ACA 9701      SBIW	R24,1
    00ACB 018C      MOVW	R16,R24
    00ACC 3000      CPI	R16,0
    00ACD 0701      CPC	R16,R17
    00ACE F7C9      BNE	0x0AC8
(0036) 		a = 65535;
    00ACF EF0F      LDI	R16,0xFF
    00AD0 EF1F      LDI	R17,0xFF
    00AD1 CFDB      RJMP	0x0AAD
    00AD2 9508      RET
(0037)  	}
(0038) }
(0039) 
(0040) void IOReinstate(void){
(0041) 
(0042) 	infoMal_teacher.dianfengshan =\
_IOReinstate:
    00AD3 2422      CLR	R2
    00AD4 9220 05B9 STS	infoMal_teacher+3,R2
    00AD6 9220 05BA STS	infoMal_teacher+4,R2
    00AD8 9220 05B7 STS	infoMal_teacher+1,R2
    00ADA 9220 05B8 STS	infoMal_teacher+2,R2
    00ADC 9220 05B6 STS	infoMal_teacher,R2
(0043) 	infoMal_teacher.weibolu =\
(0044) 	infoMal_teacher.dianfanbao =\
(0045) 	infoMal_teacher.xiyiji =\
(0046) 	infoMal_teacher.xiaodugui \
(0047) 	= 0;
(0048) 	
(0049) 	infoMal_student.dianfengshan =\
    00ADE 9220 05BE STS	infoMal_student+3,R2
    00AE0 9220 05BF STS	infoMal_student+4,R2
    00AE2 9220 05BC STS	infoMal_student+1,R2
    00AE4 9220 05BD STS	infoMal_student+2,R2
    00AE6 9220 05BB STS	infoMal_student,R2
(0050) 	infoMal_student.weibolu =\
(0051) 	infoMal_student.dianfanbao =\
(0052) 	infoMal_student.xiyiji =\
(0053) 	infoMal_student.xiaodugui \
(0054) 	= 0;
(0055) 	
(0056) 	IOInit();
    00AE8 CFA4      RJMP	_IOInit
_OPJudje:
  pt                   --> R22
  temp                 --> R10
  loop                 --> R20
  Base                 --> R12
  S                    --> R10
  T                    --> R14
    00AE9 940E 0CC3 CALL	push_xgsetF0FC
    00AEB 2EA2      MOV	R10,R18
    00AEC 2EE0      MOV	R14,R16
    00AED 84CA      LDD	R12,Y+10
(0057) }
(0058) 
(0059) void OPJudje(uchar T,uchar S,uchar Base){ 		  //直接异或比较输出结果
(0060) 
(0061) 	uchar temp,loop,pt;
(0062) 	pt = 0;
    00AEE 2766      CLR	R22
(0063) 	
(0064) 	temp = T ^ S;
    00AEF 2C2E      MOV	R2,R14
    00AF0 242A      EOR	R2,R10
    00AF1 2CA2      MOV	R10,R2
(0065) 	for(loop = 0;loop < 8;loop ++){
    00AF2 2744      CLR	R20
    00AF3 C015      RJMP	0x0B09
(0066) 			 
(0067) 		if((temp >> loop) & 0x01)resIOJudge[pt++] = Base + loop;
    00AF4 2D0A      MOV	R16,R10
    00AF5 2F14      MOV	R17,R20
    00AF6 940E 0CF6 CALL	lsr8
    00AF8 2F80      MOV	R24,R16
    00AF9 7081      ANDI	R24,1
    00AFA F069      BEQ	0x0B08
    00AFB 2E26      MOV	R2,R22
    00AFC 2433      CLR	R3
    00AFD 0121      MOVW	R4,R2
    00AFE 5F6F      SUBI	R22,0xFF
    00AFF 2C2C      MOV	R2,R12
    00B00 0E24      ADD	R2,R20
    00B01 EC80      LDI	R24,0xC0
    00B02 E095      LDI	R25,5
    00B03 2DE4      MOV	R30,R4
    00B04 27FF      CLR	R31
    00B05 0FE8      ADD	R30,R24
    00B06 1FF9      ADC	R31,R25
    00B07 8220      ST	Z,R2
    00B08 9543      INC	R20
    00B09 3048      CPI	R20,0x8
    00B0A F348      BCS	0x0AF4
    00B0B 940C 0CB8 JMP	pop_xgsetF0FC
_dianfengshan_IO:
  a                    --> R20
  obj                  --> R22
    00B0D 940E 0CE2 CALL	push_xgsetF00C
    00B0F 2F42      MOV	R20,R18
    00B10 2F60      MOV	R22,R16
(0068) 	}
(0069) 	
(0070) 	//resIOJudge[6] = temp;						  		 //测试比较结果输出
(0071) 	//resIOJudge[7] = infoMal_teacher.xiaodugui;
(0072) 	//resIOJudge[8] = infoMal_student.xiaodugui;
(0073) }
(0074) 
(0075) //单字节从右到左分别表示设故编号
(0076) //1-4号电风扇、5-6号电饭煲、7-9号微波炉、10-12号消毒柜、13-14号洗衣机
(0077) void dianfengshan_IO(uchar obj,uchar a){	   //1-4号电风扇
(0078) 
(0079) 	if(obj == 'T'){		   			 		   //教师端设故信息更新
    00B11 3564      CPI	R22,0x54
    00B12 F529      BNE	0x0B38
(0080) 	
(0081) 		infoMal_teacher.dianfengshan |= (1 << (a-1));
    00B13 2F14      MOV	R17,R20
    00B14 5011      SUBI	R17,1
    00B15 E001      LDI	R16,1
    00B16 940E 0CF0 CALL	lsl8
    00B18 9020 05B6 LDS	R2,infoMal_teacher
    00B1A 2A20      OR	R2,R16
    00B1B 9220 05B6 STS	infoMal_teacher,R2
(0082) 		//IO Opreation here
(0083) 		switch(a){
    00B1D 2EA4      MOV	R10,R20
    00B1E 24BB      CLR	R11
    00B1F 01C5      MOVW	R24,R10
    00B20 3081      CPI	R24,1
    00B21 E0E0      LDI	R30,0
    00B22 079E      CPC	R25,R30
    00B23 F069      BEQ	0x0B31
    00B24 3082      CPI	R24,2
    00B25 E0E0      LDI	R30,0
    00B26 079E      CPC	R25,R30
    00B27 F059      BEQ	0x0B33
    00B28 3083      CPI	R24,3
    00B29 E0E0      LDI	R30,0
    00B2A 079E      CPC	R25,R30
    00B2B F049      BEQ	0x0B35
    00B2C 3084      CPI	R24,4
    00B2D E0E0      LDI	R30,0
    00B2E 079E      CPC	R25,R30
    00B2F F039      BEQ	0x0B37
    00B30 C007      RJMP	0x0B38
(0084) 	
(0085) 			case  1:	   PORTA &= (~0x01);  break;
    00B31 98D8      CBI	0x1B,0
    00B32 C005      RJMP	0x0B38
(0086) 			case  2:   	   PORTA &= (~0x04);  break;
    00B33 98DA      CBI	0x1B,2
    00B34 C003      RJMP	0x0B38
(0087) 			case  3:   	   PORTA &= (~0x10);  break;
    00B35 98DC      CBI	0x1B,4
    00B36 C001      RJMP	0x0B38
(0088) 			case  4:   	   PORTA &= (~0x40);  break;
    00B37 98DE      CBI	0x1B,6
(0089) 			default:   	   break;
(0090) 		}
(0091) 	} 
(0092) 	if(obj == 'S'){		   		 			  //学生端设故信息更新
    00B38 3563      CPI	R22,0x53
    00B39 F519      BNE	0x0B5D
(0093) 	
(0094) 		infoMal_student.dianfengshan |= (1 << (a-1));
    00B3A 2F14      MOV	R17,R20
    00B3B 5011      SUBI	R17,1
    00B3C E001      LDI	R16,1
    00B3D 940E 0CF0 CALL	lsl8
    00B3F 9020 05BB LDS	R2,infoMal_student
    00B41 2A20      OR	R2,R16
    00B42 9220 05BB STS	infoMal_student,R2
(0095) 		//IO Opreation here
(0096) 		switch(a){
    00B44 2755      CLR	R21
    00B45 3041      CPI	R20,1
    00B46 E0E0      LDI	R30,0
    00B47 075E      CPC	R21,R30
    00B48 F069      BEQ	0x0B56
    00B49 3042      CPI	R20,2
    00B4A E0E0      LDI	R30,0
    00B4B 075E      CPC	R21,R30
    00B4C F059      BEQ	0x0B58
    00B4D 3043      CPI	R20,3
    00B4E E0E0      LDI	R30,0
    00B4F 075E      CPC	R21,R30
    00B50 F049      BEQ	0x0B5A
    00B51 3044      CPI	R20,4
    00B52 E0E0      LDI	R30,0
    00B53 075E      CPC	R21,R30
    00B54 F039      BEQ	0x0B5C
    00B55 C007      RJMP	0x0B5D
(0097) 	
(0098) 			case  1:	   PORTA |= (0x01);  break;
    00B56 9AD8      SBI	0x1B,0
    00B57 C005      RJMP	0x0B5D
(0099) 			case  2:   	   PORTA |= (0x04);  break;
    00B58 9ADA      SBI	0x1B,2
    00B59 C003      RJMP	0x0B5D
(0100) 			case  3:   	   PORTA |= (0x10);  break;
    00B5A 9ADC      SBI	0x1B,4
    00B5B C001      RJMP	0x0B5D
(0101) 			case  4:   	   PORTA |= (0x40);  break;
    00B5C 9ADE      SBI	0x1B,6
(0102) 			default:   	   break;
(0103) 		}	
(0104) 	}
    00B5D 940C 0CE9 JMP	pop_xgsetF00C
_dianfanbao_IO:
  a                    --> R20
  obj                  --> R22
    00B5F 940E 0CE2 CALL	push_xgsetF00C
    00B61 2F42      MOV	R20,R18
    00B62 2F60      MOV	R22,R16
(0105) }
(0106) 
(0107) void dianfanbao_IO(uchar obj,uchar a){	  	   //5-7号电饭煲
(0108) 
(0109) 	if(obj == 'T'){		 		   			   //教师端设故信息更新
    00B63 3564      CPI	R22,0x54
    00B64 F519      BNE	0x0B88
(0110) 	
(0111) 		infoMal_teacher.dianfanbao |= (1 << (a-1));
    00B65 2F14      MOV	R17,R20
    00B66 5011      SUBI	R17,1
    00B67 E001      LDI	R16,1
    00B68 940E 0CF0 CALL	lsl8
    00B6A 9020 05B7 LDS	R2,infoMal_teacher+1
    00B6C 2A20      OR	R2,R16
    00B6D 9220 05B7 STS	infoMal_teacher+1,R2
(0112) 		//IO Opreation here
(0113) 		switch(a){
    00B6F 2EA4      MOV	R10,R20
    00B70 24BB      CLR	R11
    00B71 01C5      MOVW	R24,R10
    00B72 3081      CPI	R24,1
    00B73 E0E0      LDI	R30,0
    00B74 079E      CPC	R25,R30
    00B75 F069      BEQ	0x0B83
    00B76 3082      CPI	R24,2
    00B77 E0E0      LDI	R30,0
    00B78 079E      CPC	R25,R30
    00B79 F059      BEQ	0x0B85
    00B7A 3083      CPI	R24,3
    00B7B E0E0      LDI	R30,0
    00B7C 079E      CPC	R25,R30
    00B7D F049      BEQ	0x0B87
    00B7E 3084      CPI	R24,4
    00B7F E0E0      LDI	R30,0
    00B80 079E      CPC	R25,R30
    00B81 F031      BEQ	0x0B88
    00B82 C005      RJMP	0x0B88
(0114) 	
(0115) 			case  1:	   PORTB &= (~0x01);  break;
    00B83 98C0      CBI	0x18,0
    00B84 C003      RJMP	0x0B88
(0116) 			case  2:   	   PORTB &= (~0x04);  break;
    00B85 98C2      CBI	0x18,2
    00B86 C001      RJMP	0x0B88
(0117) 			case  3:   	   PORTB &= (~0x10);  break;
    00B87 98C4      CBI	0x18,4
(0118) 			case  4:   	   break;
(0119) 			default:   	   break;
(0120) 		}
(0121) 	} 	
(0122) 	if(obj == 'S'){				   	  	 	   //学生端设故信息更新
    00B88 3563      CPI	R22,0x53
    00B89 F4E9      BNE	0x0BA7
(0123) 	
(0124) 		infoMal_student.dianfanbao |= (1 << (a-1));
    00B8A 2F14      MOV	R17,R20
    00B8B 5011      SUBI	R17,1
    00B8C E001      LDI	R16,1
    00B8D 940E 0CF0 CALL	lsl8
    00B8F 9020 05BC LDS	R2,infoMal_student+1
    00B91 2A20      OR	R2,R16
    00B92 9220 05BC STS	infoMal_student+1,R2
(0125) 		//IO Opreation here
(0126) 		switch(a){
    00B94 2755      CLR	R21
    00B95 3041      CPI	R20,1
    00B96 E0E0      LDI	R30,0
    00B97 075E      CPC	R21,R30
    00B98 F049      BEQ	0x0BA2
    00B99 3042      CPI	R20,2
    00B9A E0E0      LDI	R30,0
    00B9B 075E      CPC	R21,R30
    00B9C F039      BEQ	0x0BA4
    00B9D 3043      CPI	R20,3
    00B9E E0E0      LDI	R30,0
    00B9F 075E      CPC	R21,R30
    00BA0 F029      BEQ	0x0BA6
    00BA1 C005      RJMP	0x0BA7
(0127) 	
(0128) 			case  1:	   PORTB |= (0x01);  break;
    00BA2 9AC0      SBI	0x18,0
    00BA3 C003      RJMP	0x0BA7
(0129) 			case  2:   	   PORTB |= (0x04);  break;
    00BA4 9AC2      SBI	0x18,2
    00BA5 C001      RJMP	0x0BA7
(0130) 			case  3:   	   PORTB |= (0x10);  break;
    00BA6 9AC4      SBI	0x18,4
(0131) 			default:   	   break;
(0132) 		}
(0133) 	}	
    00BA7 940C 0CE9 JMP	pop_xgsetF00C
_weibolu_IO:
  a                    --> R20
  obj                  --> R22
    00BA9 940E 0CE2 CALL	push_xgsetF00C
    00BAB 2F42      MOV	R20,R18
    00BAC 2F60      MOV	R22,R16
(0134) }
(0135) 
(0136) void weibolu_IO(uchar obj,uchar a){			   //8-9号微波炉
(0137) 
(0138) 	if(obj == 'T'){	  						   //教师端设故信息更新
    00BAD 3564      CPI	R22,0x54
    00BAE F4C9      BNE	0x0BC8
(0139) 	
(0140) 		infoMal_teacher.weibolu |= (1 << (a-1));
    00BAF 2F14      MOV	R17,R20
    00BB0 5011      SUBI	R17,1
    00BB1 E001      LDI	R16,1
    00BB2 940E 0CF0 CALL	lsl8
    00BB4 9020 05B8 LDS	R2,infoMal_teacher+2
    00BB6 2A20      OR	R2,R16
    00BB7 9220 05B8 STS	infoMal_teacher+2,R2
(0141) 		//IO Opreation here
(0142) 		switch(a){
    00BB9 2EA4      MOV	R10,R20
    00BBA 24BB      CLR	R11
    00BBB 01C5      MOVW	R24,R10
    00BBC 3081      CPI	R24,1
    00BBD E0E0      LDI	R30,0
    00BBE 079E      CPC	R25,R30
    00BBF F029      BEQ	0x0BC5
    00BC0 3082      CPI	R24,2
    00BC1 E0E0      LDI	R30,0
    00BC2 079E      CPC	R25,R30
    00BC3 F019      BEQ	0x0BC7
    00BC4 C003      RJMP	0x0BC8
(0143) 	
(0144) 			case  1:	   PORTB &= (~0x40);  break;
    00BC5 98C6      CBI	0x18,6
    00BC6 C001      RJMP	0x0BC8
(0145) 			case  2:   	   PORTC &= (~0x01);  break;
    00BC7 98A8      CBI	0x15,0
(0146) 			default:   	   break;
(0147) 		}
(0148) 	} 	
(0149) 	if(obj == 'S'){				   	  	 	   //学生端设故信息更新
    00BC8 3563      CPI	R22,0x53
    00BC9 F4B9      BNE	0x0BE1
(0150) 	
(0151) 		infoMal_student.weibolu |= (1 << (a-1));
    00BCA 2F14      MOV	R17,R20
    00BCB 5011      SUBI	R17,1
    00BCC E001      LDI	R16,1
    00BCD 940E 0CF0 CALL	lsl8
    00BCF 9020 05BD LDS	R2,infoMal_student+2
    00BD1 2A20      OR	R2,R16
    00BD2 9220 05BD STS	infoMal_student+2,R2
(0152) 		//IO Opreation here
(0153) 		switch(a){
    00BD4 2755      CLR	R21
    00BD5 3041      CPI	R20,1
    00BD6 E0E0      LDI	R30,0
    00BD7 075E      CPC	R21,R30
    00BD8 F029      BEQ	0x0BDE
    00BD9 3042      CPI	R20,2
    00BDA E0E0      LDI	R30,0
    00BDB 075E      CPC	R21,R30
    00BDC F019      BEQ	0x0BE0
    00BDD C003      RJMP	0x0BE1
(0154) 	
(0155) 			case  1:	   PORTB |= (0x40);  break;
    00BDE 9AC6      SBI	0x18,6
    00BDF C001      RJMP	0x0BE1
(0156) 			case  2:   	   PORTC |= (0x01);  break;
    00BE0 9AA8      SBI	0x15,0
(0157) 			default:   	   break;
(0158) 		}
(0159) 	}	
    00BE1 940C 0CE9 JMP	pop_xgsetF00C
_xiaodugui_IO:
  a                    --> R20
  obj                  --> R22
    00BE3 940E 0CE2 CALL	push_xgsetF00C
    00BE5 2F42      MOV	R20,R18
    00BE6 2F60      MOV	R22,R16
(0160) }
(0161) 
(0162) void xiaodugui_IO(uchar obj,uchar a){	 	   //10-11号消毒柜
(0163) 
(0164) 	if(obj == 'T'){				  			   //教师端设故信息更新
    00BE7 3564      CPI	R22,0x54
    00BE8 F4C9      BNE	0x0C02
(0165) 	
(0166) 		infoMal_teacher.xiaodugui |= (1 << (a-1));
    00BE9 2F14      MOV	R17,R20
    00BEA 5011      SUBI	R17,1
    00BEB E001      LDI	R16,1
    00BEC 940E 0CF0 CALL	lsl8
    00BEE 9020 05B9 LDS	R2,infoMal_teacher+3
    00BF0 2A20      OR	R2,R16
    00BF1 9220 05B9 STS	infoMal_teacher+3,R2
(0167) 		//IO Opreation here
(0168) 		switch(a){
    00BF3 2EA4      MOV	R10,R20
    00BF4 24BB      CLR	R11
    00BF5 01C5      MOVW	R24,R10
    00BF6 3081      CPI	R24,1
    00BF7 E0E0      LDI	R30,0
    00BF8 079E      CPC	R25,R30
    00BF9 F029      BEQ	0x0BFF
    00BFA 3082      CPI	R24,2
    00BFB E0E0      LDI	R30,0
    00BFC 079E      CPC	R25,R30
    00BFD F019      BEQ	0x0C01
    00BFE C003      RJMP	0x0C02
(0169) 	
(0170) 			case  1:	   PORTC &= (~0x04);  break;
    00BFF 98AA      CBI	0x15,2
    00C00 C001      RJMP	0x0C02
(0171) 			case  2:   	   PORTC &= (~0x10);  break;
    00C01 98AC      CBI	0x15,4
(0172) 			default:   	   break;
(0173) 		}
(0174) 	} 
(0175) 	if(obj == 'S'){				  	 	   	   //学生端设故信息更新
    00C02 3563      CPI	R22,0x53
    00C03 F4B9      BNE	0x0C1B
(0176) 	
(0177) 		infoMal_student.xiaodugui |= (1 << (a-1));
    00C04 2F14      MOV	R17,R20
    00C05 5011      SUBI	R17,1
    00C06 E001      LDI	R16,1
    00C07 940E 0CF0 CALL	lsl8
    00C09 9020 05BE LDS	R2,infoMal_student+3
    00C0B 2A20      OR	R2,R16
    00C0C 9220 05BE STS	infoMal_student+3,R2
(0178) 		//IO Opreation here
(0179) 		switch(a){
    00C0E 2755      CLR	R21
    00C0F 3041      CPI	R20,1
    00C10 E0E0      LDI	R30,0
    00C11 075E      CPC	R21,R30
    00C12 F029      BEQ	0x0C18
    00C13 3042      CPI	R20,2
    00C14 E0E0      LDI	R30,0
    00C15 075E      CPC	R21,R30
    00C16 F019      BEQ	0x0C1A
    00C17 C003      RJMP	0x0C1B
(0180) 	
(0181) 			case  1:	   PORTC |= (0x04);  break;
    00C18 9AAA      SBI	0x15,2
    00C19 C001      RJMP	0x0C1B
(0182) 			case  2:   	   PORTC |= (0x10);  break;
    00C1A 9AAC      SBI	0x15,4
(0183) 			default:   	   break;
(0184) 		}
(0185) 	}	
    00C1B 940C 0CE9 JMP	pop_xgsetF00C
_xiyiji_IO:
  a                    --> R20
  obj                  --> R22
    00C1D 940E 0CE2 CALL	push_xgsetF00C
    00C1F 2F42      MOV	R20,R18
    00C20 2F60      MOV	R22,R16
(0186) }
(0187) 
(0188) void xiyiji_IO(uchar obj,uchar a){			   //12-14号洗衣机
(0189) 
(0190) 	if(obj == 'T'){	 		   				   //教师端设故信息更新
    00C21 3564      CPI	R22,0x54
    00C22 F559      BNE	0x0C4E
(0191) 	
(0192) 		infoMal_teacher.xiyiji |= (1 << (a-1));
    00C23 2F14      MOV	R17,R20
    00C24 5011      SUBI	R17,1
    00C25 E001      LDI	R16,1
    00C26 940E 0CF0 CALL	lsl8
    00C28 9020 05BA LDS	R2,infoMal_teacher+4
    00C2A 2A20      OR	R2,R16
    00C2B 9220 05BA STS	infoMal_teacher+4,R2
(0193) 		//IO Opreation here
(0194) 		switch(a){
    00C2D 2EA4      MOV	R10,R20
    00C2E 24BB      CLR	R11
    00C2F 01C5      MOVW	R24,R10
    00C30 3081      CPI	R24,1
    00C31 E0E0      LDI	R30,0
    00C32 079E      CPC	R25,R30
    00C33 F069      BEQ	0x0C41
    00C34 3082      CPI	R24,2
    00C35 E0E0      LDI	R30,0
    00C36 079E      CPC	R25,R30
    00C37 F059      BEQ	0x0C43
    00C38 3083      CPI	R24,3
    00C39 E0E0      LDI	R30,0
    00C3A 079E      CPC	R25,R30
    00C3B F069      BEQ	0x0C49
    00C3C 3084      CPI	R24,4
    00C3D E0E0      LDI	R30,0
    00C3E 079E      CPC	R25,R30
    00C3F F071      BEQ	0x0C4E
    00C40 C00D      RJMP	0x0C4E
(0195) 	
(0196) 			case  1:	   PORTC &= (~0x40);  break;
    00C41 98AE      CBI	0x15,6
    00C42 C00B      RJMP	0x0C4E
(0197) 			case  2:   	   PORTF &= (~0x01);  break;
    00C43 9180 0062 LDS	R24,0x62
    00C45 7F8E      ANDI	R24,0xFE
    00C46 9380 0062 STS	0x62,R24
    00C48 C005      RJMP	0x0C4E
(0198) 			case  3:   	   PORTF &= (~0x04);  break;
    00C49 9180 0062 LDS	R24,0x62
    00C4B 7F8B      ANDI	R24,0xFB
    00C4C 9380 0062 STS	0x62,R24
(0199) 			case  4:   	   break;
(0200) 			default:   	   break;
(0201) 		}
(0202) 	} 	
(0203) 	if(obj == 'S'){			   	  	 		   //学生端设故信息更新
    00C4E 3563      CPI	R22,0x53
    00C4F F549      BNE	0x0C79
(0204) 	
(0205) 		infoMal_student.xiyiji |= (1 << (a-1));
    00C50 2F14      MOV	R17,R20
    00C51 5011      SUBI	R17,1
    00C52 E001      LDI	R16,1
    00C53 940E 0CF0 CALL	lsl8
    00C55 9020 05BF LDS	R2,infoMal_student+4
    00C57 2A20      OR	R2,R16
    00C58 9220 05BF STS	infoMal_student+4,R2
(0206) 		//IO Opreation here
(0207) 		switch(a){
    00C5A 2755      CLR	R21
    00C5B 3041      CPI	R20,1
    00C5C E0E0      LDI	R30,0
    00C5D 075E      CPC	R21,R30
    00C5E F069      BEQ	0x0C6C
    00C5F 3042      CPI	R20,2
    00C60 E0E0      LDI	R30,0
    00C61 075E      CPC	R21,R30
    00C62 F059      BEQ	0x0C6E
    00C63 3043      CPI	R20,3
    00C64 E0E0      LDI	R30,0
    00C65 075E      CPC	R21,R30
    00C66 F069      BEQ	0x0C74
    00C67 3044      CPI	R20,4
    00C68 E0E0      LDI	R30,0
    00C69 075E      CPC	R21,R30
    00C6A F071      BEQ	0x0C79
    00C6B C00D      RJMP	0x0C79
(0208) 	
(0209) 			case  1:	   PORTC |= (0x40);  break;
    00C6C 9AAE      SBI	0x15,6
    00C6D C00B      RJMP	0x0C79
(0210) 			case  2:   	   PORTF |= (0x01);  break;
    00C6E 9180 0062 LDS	R24,0x62
    00C70 6081      ORI	R24,1
    00C71 9380 0062 STS	0x62,R24
    00C73 C005      RJMP	0x0C79
(0211) 			case  3:   	   PORTF |= (0x04);  break;
    00C74 9180 0062 LDS	R24,0x62
    00C76 6084      ORI	R24,4
    00C77 9380 0062 STS	0x62,R24
(0212) 			case  4:   	   break;
(0213) 			default:   	   break;
(0214) 		}
(0215) 	}	
FILE: <library>
    00C79 940C 0CE9 JMP	pop_xgsetF00C
_memset:
    00C7B 8188      LD	R24,Y
    00C7C 8199      LDD	R25,Y+1
    00C7D 3080      CPI	R24,0
    00C7E 0789      CPC	R24,R25
    00C7F F029      BEQ	0x0C85
    00C80 2FE0      MOV	R30,R16
    00C81 2FF1      MOV	R31,R17
    00C82 9321      ST	Z+,R18
    00C83 9701      SBIW	R24,1
    00C84 F7E9      BNE	0x0C82
    00C85 9508      RET
_strcmp:
    00C86 2FE0      MOV	R30,R16
    00C87 2FF1      MOV	R31,R17
    00C88 2FA2      MOV	R26,R18
    00C89 2FB3      MOV	R27,R19
    00C8A 9101      LD	R16,Z+
    00C8B 911D      LD	R17,X+
    00C8C 1B01      SUB	R16,R17
    00C8D F419      BNE	0x0C91
    00C8E 2311      TST	R17
    00C8F F7D1      BNE	0x0C8A
    00C90 2700      CLR	R16
    00C91 0B11      SBC	R17,R17
    00C92 9508      RET
_strcpy:
    00C93 2FA0      MOV	R26,R16
    00C94 2FB1      MOV	R27,R17
    00C95 2FE2      MOV	R30,R18
    00C96 2FF3      MOV	R31,R19
    00C97 9001      LD	R0,Z+
    00C98 920D      ST	X+,R0
    00C99 2000      TST	R0
    00C9A F7E1      BNE	0x0C97
    00C9B 9508      RET
mod16u:
    00C9C 9468      BSET	6
    00C9D C001      RJMP	xdiv16u
div16u:
    00C9E 94E8      BCLR	6
xdiv16u:
    00C9F 92EA      ST	-Y,R14
    00CA0 92FA      ST	-Y,R15
    00CA1 938A      ST	-Y,R24
    00CA2 24EE      CLR	R14
    00CA3 24FF      CLR	R15
    00CA4 E180      LDI	R24,0x10
    00CA5 0F00      LSL	R16
    00CA6 1F11      ROL	R17
    00CA7 1CEE      ROL	R14
    00CA8 1CFF      ROL	R15
    00CA9 16E2      CP	R14,R18
    00CAA 06F3      CPC	R15,R19
    00CAB F018      BCS	0x0CAF
    00CAC 1AE2      SUB	R14,R18
    00CAD 0AF3      SBC	R15,R19
    00CAE 9503      INC	R16
    00CAF 958A      DEC	R24
    00CB0 F7A1      BNE	0x0CA5
    00CB1 F416      BRTC	0x0CB4
    00CB2 2D0E      MOV	R16,R14
    00CB3 2D1F      MOV	R17,R15
    00CB4 9189      LD	R24,Y+
    00CB5 90F9      LD	R15,Y+
    00CB6 90E9      LD	R14,Y+
    00CB7 9508      RET
pop_xgsetF0FC:
    00CB8 90A9      LD	R10,Y+
    00CB9 90B9      LD	R11,Y+
    00CBA 90C9      LD	R12,Y+
    00CBB 90D9      LD	R13,Y+
    00CBC 90E9      LD	R14,Y+
    00CBD 90F9      LD	R15,Y+
    00CBE 9149      LD	R20,Y+
    00CBF 9159      LD	R21,Y+
    00CC0 9169      LD	R22,Y+
    00CC1 9179      LD	R23,Y+
    00CC2 9508      RET
push_xgsetF0FC:
    00CC3 937A      ST	-Y,R23
    00CC4 936A      ST	-Y,R22
push_xgset30FC:
    00CC5 935A      ST	-Y,R21
    00CC6 934A      ST	-Y,R20
push_xgset00FC:
    00CC7 92FA      ST	-Y,R15
    00CC8 92EA      ST	-Y,R14
push_xgset003C:
    00CC9 92DA      ST	-Y,R13
    00CCA 92CA      ST	-Y,R12
    00CCB 92BA      ST	-Y,R11
    00CCC 92AA      ST	-Y,R10
    00CCD 9508      RET
push_xgset300C:
    00CCE 935A      ST	-Y,R21
    00CCF 934A      ST	-Y,R20
    00CD0 92BA      ST	-Y,R11
    00CD1 92AA      ST	-Y,R10
    00CD2 9508      RET
pop_xgset300C:
    00CD3 90A9      LD	R10,Y+
    00CD4 90B9      LD	R11,Y+
    00CD5 9149      LD	R20,Y+
    00CD6 9159      LD	R21,Y+
    00CD7 9508      RET
push_xgsetF000:
    00CD8 937A      ST	-Y,R23
    00CD9 936A      ST	-Y,R22
    00CDA 935A      ST	-Y,R21
    00CDB 934A      ST	-Y,R20
    00CDC 9508      RET
pop_xgsetF000:
    00CDD 9149      LD	R20,Y+
    00CDE 9159      LD	R21,Y+
    00CDF 9169      LD	R22,Y+
    00CE0 9179      LD	R23,Y+
    00CE1 9508      RET
push_xgsetF00C:
    00CE2 937A      ST	-Y,R23
    00CE3 936A      ST	-Y,R22
    00CE4 935A      ST	-Y,R21
    00CE5 934A      ST	-Y,R20
    00CE6 92BA      ST	-Y,R11
    00CE7 92AA      ST	-Y,R10
    00CE8 9508      RET
pop_xgsetF00C:
    00CE9 90A9      LD	R10,Y+
    00CEA 90B9      LD	R11,Y+
    00CEB 9149      LD	R20,Y+
    00CEC 9159      LD	R21,Y+
    00CED 9169      LD	R22,Y+
    00CEE 9179      LD	R23,Y+
    00CEF 9508      RET
lsl8:
    00CF0 2311      TST	R17
    00CF1 F019      BEQ	0x0CF5
    00CF2 0F00      LSL	R16
    00CF3 951A      DEC	R17
    00CF4 CFFB      RJMP	lsl8
    00CF5 9508      RET
lsr8:
    00CF6 2311      TST	R17
    00CF7 F019      BEQ	0x0CFB
    00CF8 9506      LSR	R16
    00CF9 951A      DEC	R17
    00CFA CFFB      RJMP	lsr8
    00CFB 9508      RET
